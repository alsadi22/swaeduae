use Illuminate\Support\Facades\Route;

if (!function_exists('swaed_stub')) {
    function swaed_stub($text){ return response($text, 200, ['Content-Type'=>'text/plain']); }
}

// Phase-0 cleanup: redirect any __stub/* paths to the real admin area (absolute https)
Route::any('/__stub/{any}', function(){ return redirect('https://swaeduae.ae/admin', 301); })->where('any','.*');

/* ------------ Public org listings ------------- */
if (!Route::has('orgs.public.index')) {
    Route::get('/__alias/orgs', fn() => swaed_stub('Organizations index (alias stub)'))
        ->name('orgs.public.index');
}
if (!Route::has('orgs.public.show')) {
    Route::get('/__alias/orgs/{id}/{slug?}', fn($id,$slug=null) => swaed_stub("Organization $id (alias stub)"))
        ->name('orgs.public.show');
}

/* ------------ Volunteer dashboard/profile nav ------------- */
if (!Route::has('dashboard')) {
    Route::redirect('/__stub/dashboard', 'https://swaeduae.ae/admin', 301)->name('dashboard');
}
if (!Route::has('volunteer.dashboard')) {
    Route::get('/__stub/volunteer-dashboard', fn() => redirect()->route('dashboard'))
        ->name('volunteer.dashboard');
}
if (!Route::has('profile')) {
    Route::get('/__stub/profile', fn() => redirect()->route('dashboard'))->name('profile');
}
if (!Route::has('profile.edit')) {
    Route::get('/__stub/profile/edit', fn() => swaed_stub('Profile edit (stub)'))->name('profile.edit');
}

/* ------------ Certificates & transcript ------------- */
# Primary “My Certificates”
if (!Route::has('my.certificates')) {
    Route::get('/my/certificates', fn() => view()->exists('my.certificates')
        ? view('my.certificates')
        : swaed_stub('My Certificates (stub view missing)'))->name('my.certificates');
}
# Historic alias used in some blades
if (!Route::has('certificates.my')) {
    Route::get('/__alias/my/certificates', fn() => redirect()->route('my.certificates'))
        ->name('certificates.my');
}
if (!Route::has('my.certificates.download')) {
    Route::get('/my/certificates/{id}/download', fn($id) => swaed_stub("Download certificate $id (stub)"))
        ->name('my.certificates.download');
}
if (!Route::has('certificates.show')) {
    Route::get('/certificates/{code}', fn($code) => swaed_stub("Certificate $code (stub)"))
        ->name('certificates.show');
}
if (!Route::has('certificates.verify')) {
    Route::get('/certificates/verify/{code}', fn($code) => swaed_stub("Verify certificate $code (stub)"))
        ->name('certificates.verify');
}
if (!Route::has('verify.show') && Route::has('certificates.verify')) {
    Route::get('/verify/{code}', fn($code) => redirect()->route('certificates.verify', $code))
        ->name('verify.show');
}
if (!Route::has('certificates.pdf')) {
    Route::get('/certificates/{uuid}.pdf', fn($uuid) => swaed_stub("Certificate PDF $uuid (coming soon)"))
        ->name('certificates.pdf');
}
if (!Route::has('transcript.pdf')) {
    Route::get('/transcript.pdf', fn() => swaed_stub('Transcript PDF (coming soon)'))
        ->name('transcript.pdf');
}

/* ------------ Auth/UI links (email, social, UAE PASS) ------------- */
if (!Route::has('login.email')) {
    Route::get('/login/email', fn() => Route::has('login') ? redirect()->route('login') : swaed_stub('Login (stub)'))
        ->name('login.email');
}
if (!Route::has('social.redirect')) {
    Route::get('/auth/social/{provider}', fn($provider) =>
        Route::has('login') ? redirect()->route('login') : swaed_stub("Social login $provider (stub)"))
        ->name('social.redirect');
}
if (!Route::has('uaepass.redirect')) {
    Route::get('/auth/uaepass', fn() => Route::has('login') ? redirect()->route('login') : swaed_stub('UAE PASS (stub)'))
        ->name('uaepass.redirect');
}

/* ------------ Applications / attendance ------------- */
if (!Route::has('opportunities.apply')) {
    Route::post('/opportunities/{id}/apply', fn($id) => swaed_stub("Applied to $id (stub)"))
        ->name('opportunities.apply');
}
if (!Route::has('apply.store')) {
    Route::post('/apply', fn() => swaed_stub('Apply (stub)'))->name('apply.store');
}
if (!Route::has('attendance.checkin')) {
    Route::get('/attendance/{opp}/{token}/in', fn($opp,$token) => swaed_stub("Check-in $opp $token (stub)"))
        ->name('attendance.checkin');
}
if (!Route::has('attendance.checkout')) {
    Route::get('/attendance/{opp}/{token}/out', fn($opp,$token) => swaed_stub("Check-out $opp $token (stub)"))
        ->name('attendance.checkout');
}

/* ------------ Teams (UI exists in blades) ------------- */
if (!Route::has('teams.create')) {
    Route::get('/teams/create', fn() => swaed_stub('Teams create (stub)'))->name('teams.create');
}
if (!Route::has('teams.store')) {
    Route::post('/teams', fn() => swaed_stub('Teams store (stub)'))->name('teams.store');
}
if (!Route::has('teams.show')) {
    Route::get('/teams/{team}', fn($team) => swaed_stub("Team $team (stub)"))->name('teams.show');
}

/* ------------ Notifications (index already exists; actions stubbed) ------------- */
if (!Route::has('notifications.readAll')) {
    Route::post('/notifications/read-all', fn() => back())->name('notifications.readAll');
}
if (!Route::has('notifications.read')) {
    Route::post('/notifications/{id}/read', fn($id) => back())->name('notifications.read');
}
if (!Route::has('notifications.test')) {
    Route::get('/notifications/test', fn() => swaed_stub('Send test notification (stub)'))
        ->name('notifications.test');
}

/* ------------ Misc public links used in blades ------------- */
if (!Route::has('stories.show')) {
    Route::get('/stories/{id}', fn($id) => swaed_stub("Story $id (stub)"))->name('stories.show');
}
if (!Route::has('categories.show')) {
    Route::get('/categories/{id}', fn($id) => swaed_stub("Category $id (stub)"))->name('categories.show');
}
if (!Route::has('partners.apply.submit')) {
    Route::post('/partners/apply', fn() => swaed_stub('Partners apply (stub)'))->name('partners.apply.submit');
}
if (!Route::has('learning.store')) {
    Route::post('/learning', fn() => swaed_stub('Learning request (stub)'))->name('learning.store');
}
if (!Route::has('kyc.upload')) {
    Route::post('/kyc/upload', fn() => swaed_stub('KYC upload (stub)'))->name('kyc.upload');
}

/* ------------ Payments (templates reference these) ------------- */
if (!Route::has('payments.processStripe')) {
    Route::post('/payments/stripe', fn() => swaed_stub('Stripe payment (stub)'))->name('payments.processStripe');
}
if (!Route::has('payments.processPayTabs')) {
    Route::post('/payments/paytabs', fn() => swaed_stub('PayTabs payment (stub)'))->name('payments.processPayTabs');
}
