<?php
namespace App\Http\Controllers;

use App\Models\Event;
use App\Models\Registration;
use App\Models\Volunteer;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PublicOpportunityController extends Controller
{
    public function index(Request $r)
    {
        $q = trim((string)$r->query('q',''));
        $events = Event::query()
            ->when($q !== '', function ($query) use ($q) {
                $query->where(function ($w) use ($q) {
                    $w->where('title','like',"%$q%")
                      ->orWhere('description','like',"%$q%")
                      ->orWhere('location','like',"%$q%");
                });
            })
            ->orderByRaw('COALESCE(starts_at, created_at) DESC')
            ->limit(24)->get();

        return view('opportunities.index', ['events'=>$events, 'q'=>$q]);
    }

    public function show(string $slug)
    {
        $event = Event::where('slug',$slug)->firstOrFail();
        return view('opportunities.show', ['event'=>$event]);
    }

    public function apply(Request $r, string $slug)
    {
        $event = Event::where('slug',$slug)->firstOrFail();
        $data = $r->validate([
            'phone' => 'required|string|max:32',
            'name'  => 'nullable|string|max:100',
        ]);

        $vol = Volunteer::firstOrCreate(['phone'=>$data['phone']], ['user_id'=>null]);

        Registration::firstOrCreate(
            ['event_id'=>$event->id, 'volunteer_id'=>$vol->id],
            ['status'=>'pending']
        );

        try {
            DB::table('audits')->insert([
                'user_id'=>null,
                'action'=>'apply',
                'entity'=>'event',
                'entity_id'=>(string)$event->id,
                'meta'=>json_encode(['volunteer_id'=>$vol->id,'phone'=>$data['phone']]),
                'created_at'=>now(),
            ]);
        } catch (\Throwable $e) {}

        return back()->with('ok','Thanks! We received your application.');
    }

    public function ics(string $slug)
    {
        $event = Event::where('slug',$slug)->firstOrFail();
        $fmt = fn($d)=> $d ? $d->timezone('UTC')->format('Ymd\THis\Z') : null;
        $start = $fmt($event->starts_at); $end = $fmt($event->ends_at);
        $uid = $event->slug.'@swaeduae.ae';
        $desc = trim((string)$event->description)."\nMore: ".url('/opportunities/'.$event->slug);

        $ics = "BEGIN:VCALENDAR\r\nVERSION:2.0\r\nPRODID:-//SwaedUAE//EN\r\nBEGIN:VEVENT\r\n".
               "UID:$uid\r\nSUMMARY:".addcslashes($event->title,"\n,;")."\r\nDTSTAMP:".now('UTC')->format('Ymd\THis\Z')."\r\n".
               ($start ? "DTSTART:$start\r\n" : "").
               ($end ? "DTEND:$end\r\n" : "").
               "LOCATION:".addcslashes($event->location ?? 'UAE',"\n,;")."\r\n".
               "DESCRIPTION:".str_replace("\n","\\n",$desc)."\r\nEND:VEVENT\r\nEND:VCALENDAR\r\n";

        return response($ics, 200, [
            'Content-Type' => 'text/calendar; charset=UTF-8',
            'Content-Disposition' => 'attachment; filename="'.$event->slug.'.ics"',
        ]);
    }
}
