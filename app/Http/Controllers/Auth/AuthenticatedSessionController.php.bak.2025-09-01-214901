<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Illuminate\Http\RedirectResponse;

class AuthenticatedSessionController extends Controller
{
    public function create()
    {
        return view('auth.login');
    }

    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required','string','email'],
            'password' => ['required','string'],
        ]);

        // Using Breeze username() default
        if (!auth()->attempt($request->only('email','password'), $request->boolean('remember'))) {
            return back()->withErrors(['email' => 'Invalid credentials'])->onlyInput('email');
        }

        $request->session()->regenerate();

        $user = $request->user();
        // Role-based redirect. Fallback safely if named routes are missing.
        if ($user && ($user->role ?? null) === 'admin') {
            return redirect()->intended(Route::has('admin.dashboard') ? route('admin.dashboard') : '/admin');
        }
        if ($user && ($user->role ?? null) === 'org') {
            if (Route::has('org.dashboard')) return redirect()->intended(route('org.dashboard'));
            if (Route::has('org.login'))     return redirect()->intended(route('org.login'));
            return redirect()->intended('/org');
        }
        // Volunteers
        if (Route::has('my.profile')) return redirect()->intended(route('my.profile'));
        return redirect()->intended('/profile');
    }

    public function destroy(Request $request): RedirectResponse
    {
        auth()->guard()->logout();
        $request->session()->invalidate();
        $request->session()->regenerateToken();
        return redirect('/');
    }
}
