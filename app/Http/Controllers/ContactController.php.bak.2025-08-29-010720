<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class ContactController extends Controller
{
    public function submit(Request $r)
    {
        // Honeypot: silently accept if bot field is filled
        if (trim((string) $r->input('__website', '')) !== '') {
            return back()->with('status', __('Thanks — we received your message.'));
        }
        $rules = [
            'name'    => ['required','string','max:120'],
            'email'   => ['required','email','max:190'],
            'message' => ['required','string','max:5000'],
        ];
        if (config('services.recaptcha.enabled', false)) {
            $rules['g-recaptcha-response'] = ['required'];
        }
        $data = $r->validate($rules);


        // Optional: verify reCAPTCHA server-side
        if (config('services.recaptcha.enabled', false)) {
            $secret = config('services.recaptcha.secret');
            $token  = $r->input('g-recaptcha-response');
            if (!$secret || !$token) {
                return back()->withErrors(['captcha'=>'Captcha missing'])->withInput();
            }
            // Fail-soft: treat missing/false as invalid, but don’t call external URLs if AGENT forbids web
            if (env('AGENT_ALLOW_WEB', false)) {
                try {
                    $ok = json_decode(file_get_contents('https://www.google.com/recaptcha/api/siteverify?secret='.
                        urlencode($secret).'&response='.urlencode($token)), true);
                    if (empty($ok['success'])) {
                        return back()->withErrors(['captcha'=>'Captcha failed'])->withInput();
                    }
                } catch (\Throwable $e) {
                    // If web is disabled or request fails, we still proceed to avoid hard-blocking admins during setup
                }
            }
        }

        $to = config('mail.from.address');
        try {
            Mail::raw(
                "Contact form message\n\nName: {$data['name']}\nEmail: {$data['email']}\n\n{$data['message']}",
                fn($m) => $m->to($to)->subject('New contact form message')
            );
        } catch (\Throwable $e) {
            // Fail-soft: never break the UX on mail transport errors
            logger()->warning('Contact mail failed: '.$e->getMessage());
        }

        return back()->with('status', __('Thanks — we received your message.'));
    }
}
