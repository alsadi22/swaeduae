<?php
namespace App\Http\Middleware;
use Closure;
use Illuminate\Http\Request;

class SecurityHeaders
{
    public function handle(Request $request, Closure $next)
    {
        $response = $next($request);

        if (method_exists($response, 'headers')) {
            try {
                // --- Language & Vary normalization ---
                $locale = app()->getLocale() ?: 'en';
                $response->headers->set('Content-Language', $locale);

                $vary = (string) $response->headers->get('Vary', '');
                if ($vary !== '') {
                    if (stripos($vary, 'Accept-Language') === false) {
                        $response->headers->set('Vary', rtrim($vary, ',') . ',Accept-Language');
                    }
                } else {
                    $response->headers->set('Vary', 'Accept-Language');
                }

                // --- Cache-Control normalization for dynamic pages unless explicitly 'public' ---
                $cc = (string) $response->headers->get('Cache-Control', '');
                if ($cc === '' || stripos($cc, 'public') === false) {
                    $response->headers->set('Cache-Control', 'no-cache, private');
                }

                // --- MicroCache header: always explicit ---
                $xm = trim((string) $response->headers->get('X-MicroCache', ''));
                if ($xm === '') {
                    $response->headers->set('X-MicroCache', 'SKIP');
                }

                // --- Safe security headers (kept mild for existing blades) ---
                $response->headers->set('Content-Security-Policy',
                    "default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'; upgrade-insecure-requests"
                );
                if ($request->isSecure()) {
                    $response->headers->set('Strict-Transport-Security', 'max-age=86400; includeSubDomains; preload');
                }
                $response->headers->set('X-Frame-Options', 'SAMEORIGIN');
                $response->headers->set('X-Content-Type-Options', 'nosniff');
                $response->headers->set('Referrer-Policy', 'strict-origin-when-cross-origin');
            } catch (\Throwable $e) {
                \Log::warning('SecurityHeaders skipped: '.$e->getMessage());
            }
        }

        return $response;
    }
}
