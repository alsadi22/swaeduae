<?php
namespace App\Http\Middleware;
use Closure;
use Illuminate\Http\Request;

class SecurityHeaders
{
    public function handle(Request $request, Closure $next)
    {
        $response = $next($request);

        // Set minimal, safe headers without risking errors
        if (method_exists($response, 'headers')) {
            try {
                // Basic CSP (inline allowed for existing blades)
                $response->headers->set('Content-Security-Policy',
                    "default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline'; font-src 'self' data:; connect-src 'self'; frame-ancestors 'self'; upgrade-insecure-requests"
                );
                // Mild HSTS (1 day) only on HTTPS
                if ($request->isSecure()) {
                    $response->headers->set('Strict-Transport-Security', 'max-age=86400; includeSubDomains; preload');
                }
                // X-Frame-Options, X-Content-Type-Options
                $response->headers->set('X-Frame-Options', 'SAMEORIGIN');
                $response->headers->set('X-Content-Type-Options', 'nosniff');
                $response->headers->set('Referrer-Policy', 'strict-origin-when-cross-origin');
            } catch (\Throwable $e) {
                \Log::warning('SecurityHeaders skipped: '.$e->getMessage());
            }
        }

        return $response;
    }
}
