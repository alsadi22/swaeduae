<?php
namespace App\Http\Middleware;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Symfony\Component\HttpFoundation\Response;

class MicroCache
{
    public function handle(Request $request, Closure $next)
    {
        // compute locale directly to ensure correct keying even if order changes
        $locale = $request->getPreferredLanguage(['ar','en']) ?: 'en';

        $isCacheable = $request->isMethod('GET')
            && !$request->user()
            && !$request->is('admin/*')
            && !$request->is('org/*');

        if (!$isCacheable) return $next($request);

        $key = 'mc:' . sha1($request->fullUrl() . '|' . $locale);

        if ($html = Cache::get($key)) {
            $resp = new Response($html, 200);
            $resp->headers->set('Content-Type', 'text/html; charset=UTF-8');
            $resp->headers->set('X-MicroCache', 'HIT');
            $resp->headers->set('Content-Language', $locale);
            $resp->headers->set('Cache-Control', 'public, max-age=0, s-maxage=60, must-revalidate');
            if (method_exists($resp, 'setVary')) $resp->setVary(['Accept-Language'], false);
            return $resp;
        }

        /** @var \Symfony\Component\HttpFoundation\Response $resp */
        $resp = $next($request);

        if ($resp->getStatusCode() === 200 &&
            str_contains((string)$resp->headers->get('Content-Type',''), 'text/html')) {
            Cache::put($key, $resp->getContent(), 5); // 5s TTL
            $resp->headers->set('X-MicroCache','MISS');
        }
        return $resp;
    }
}
