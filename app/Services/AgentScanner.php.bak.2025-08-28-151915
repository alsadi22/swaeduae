<?php
namespace App\Services;
use Illuminate\Support\Facades\{App,Artisan,Blade,Config,File,Http,Log,Route};
class AgentScanner {
  public function scan(array $opts=[]): array {
    $apply=(bool)($opts['fix']??false); $webApply=(bool)($opts['web']??false);
    if ($webApply && $apply && !config('agent.allow_apply')) $apply=false;
    $started=now(); $issues=[]; $fixes=[]; $notes=[];
    $notes[]='APP_ENV='.config('app.env');
    if (config('app.debug')) $issues[]=['level'=>'warn','code'=>'env.debug','msg'=>'APP_DEBUG is true'];
    $mailer=config('mail.default') ?? config('mail.mailer'); if ($mailer==='log') $notes[]='MAIL_MAILER=log (no real emails)';
    // routes
    $routes=collect(Route::getRoutes()->getRoutes()); $byName=[]; $byKey=[];
    foreach($routes as $r){ $n=$r->getName(); if($n){$byName[$n][]=$r->uri();} $k=implode('|',$r->methods()).' '.$r->uri(); $byKey[$k]=($byKey[$k]??0)+1; }
    $dupNames=array_filter($byName,fn($a)=>count($a)>1); $dupUris=array_keys(array_filter($byKey,fn($n)=>$n>1));
    if($dupNames) $issues[]=['level'=>'warn','code'=>'routes.dup_names','data'=>$dupNames];
    if($dupUris)  $issues[]=['level'=>'warn','code'=>'routes.dup_uri_method','data'=>$dupUris];
    if(!Route::has('lang.switch')) $issues[]=['level'=>'error','code'=>'routes.missing.lang.switch','msg'=>'Route [lang.switch] not defined'];
    // blades
    [$bf,$bx]=$this->checkBlades($apply); $issues=array_merge($issues,$bf); $fixes=array_merge($fixes,$bx);
    // compile
    [$cf]=$this->compileAllBlades(); $issues=array_merge($issues,$cf);
    // smoke
    $smoke=$this->httpSmoke(); if(!empty($smoke['failures'])) $issues[]=['level'=>'warn','code'=>'http.smoke','data'=>$smoke['failures']];
    // i18n
    [$i18n]=$this->i18nAudit(); $issues=array_merge($issues,$i18n);
    // db
    [$dbf]=$this->dbAudit(); $issues=array_merge($issues,$dbf);
    // mail/queue
    [$mqf]=$this->mailQueueAudit(); $issues=array_merge($issues,$mqf);
    // security/perf/logs
    [$sec]=$this->securityAudit(); $issues=array_merge($issues,$sec);
    [$perf]=$this->perfAudit(); $issues=array_merge($issues,$perf);
    $signals=$this->logSignals(); if($signals) $issues[]=['level'=>'info','code'=>'logs.signals','data'=>$signals];
    $report=['meta'=>['started_at'=>$started->toDateTimeString(),'finished_at'=>now()->toDateTimeString(),'app_env'=>config('app.env'),'app_url'=>config('app.url'),'php'=>PHP_VERSION],'notes'=>$notes,'issues'=>$issues,'smoke'=>$smoke,'fixes'=>$fixes];
    $this->writeReport($report); return $report;
  }
  protected function writeReport(array $r): void {
    $d=storage_path('app/agent'); if(!is_dir($d)) @mkdir($d,0775,true);
    \Illuminate\Support\Facades\File::put($d.'/report.json', json_encode($r, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE));
    $h="<!doctype html><meta charset='utf-8'><title>Agent Report</title><style>body{font:14px/1.45 system-ui,Segoe UI,Arial}pre{background:#f6f8fa;padding:12px;border-radius:8px;overflow:auto}</style><h1>Agent Report</h1><pre>".e(json_encode($r, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE))."</pre>";
    \Illuminate\Support\Facades\File::put($d.'/index.html',$h);
  }
  protected function checkBlades(bool $apply): array {
    $find=[]; $fix=[]; $all=collect(\Illuminate\Support\Facades\File::allFiles(resource_path('views')))->filter(fn($f)=>str_ends_with($f->getFilename(),'.blade.php'));
    $known=collect(\Illuminate\Support\Facades\Route::getRoutes()->getRoutes())->map(fn($r)=>$r->getName())->filter()->unique()->flip();
    $ts=now()->format('Ymd-His'); $stage=storage_path("app/agent/patches/{$ts}"); @mkdir($stage,0775,true); $bad=[];
    foreach($all as $file){ $p=$file->getPathname(); $src=\Illuminate\Support\Facades\File::get($p); $orig=$src;
      preg_match_all("/route\\(\\s*['\"]([a-zA-Z0-9._-]+)['\"]\\s*\\)/",$src,$m); foreach(($m[1]??[]) as $n){ if(!$known->has($n)){ $find[]=['level'=>'warn','code'=>'blade.unknown_route','file'=>$p,'route'=>$n]; $bad[]=$p; } }
      $src=preg_replace("/route\\(\\s*(['\"])contact\\.show\\1\\s*''\\s*\\)/","route('contact.show')",$src);
      $src=preg_replace_callback("#(<form[^>]*method=['\"]post['\"][^>]*action=\\s*['\"]\\{\\{\\s*route\\(\\s*['\"]contact\\.show['\"]\\s*\\)\\s*\\}\\}['\"][^>]*>)#i",fn($mm)=>str_replace(\"route('contact.show')\",\"route('contact.send')\",$mm[1]),$src);
      $src=preg_replace_callback("#(<form[^>]*method=['\"]post['\"][^>]*>)(?![\\s\\S]*?@csrf)#i",fn($mm)=>$mm[1].\"\\n    @csrf\\n\",$src);
      if($src!==$orig){ @mkdir(dirname(\"$stage$p\"),0775,true); \Illuminate\Support\Facades\File::put(\"$stage$p.before\",$orig); \Illuminate\Support\Facades\File::put(\"$stage$p.after\",$src); $fix[]=['file'=>$p,'change'=>'blade.sanitize+csrf','staged'=>$stage]; if($apply){ \Illuminate\Support\Facades\File::put($p,$src); $fix[count($fix)-1]['applied']=true; } }
    }
    foreach (config('agent.contact_candidates',[]) as $c){ $path=base_path($c); if(!\Illuminate\Support\Facades\File::exists($path)) continue;
      $src=\Illuminate\Support\Facades\File::get($path); $orig=$src;
      $src=preg_replace("/route\\(\\s*(['\"])contact\\.show\\1\\)/","route('contact.send')",$src);
      $src=preg_replace("/route\\(\\s*(['\"])contact\\.show\\1\\s*''\\s*\\)/","route('contact.send')",$src);
      if(!str_contains($src,'@csrf')) $src=preg_replace("#(<form[^>]*method=['\"]post['\"][^>]*>)#i","$1\\n    @csrf\\n",$src,1);
      if($src!==$orig){ @mkdir(dirname(\"$stage$path\"),0775,true); \Illuminate\Support\Facades\File::put(\"$stage$path.before\",$orig); \Illuminate\Support\Facades\File::put(\"$stage$path.after\",$src); $fix[]=['file'=>$path,'change'=>'contact.action+csrf','staged'=>$stage]; if($apply){ \Illuminate\Support\Facades\File::put($path,$src); $fix[count($fix)-1]['applied']=true; } }
    }
    if($bad) $find[]=['level'=>'info','code'=>'blade.bad_route_files','data'=>array_values(array_unique($bad))];
    return [$find,$fix];
  }
  protected function compileAllBlades(): array {
    $find=[]; $files=collect(\Illuminate\Support\Facades\File::allFiles(resource_path('views')))->filter(fn($f)=>str_ends_with($f->getFilename(),'.blade.php'));
    foreach($files as $f){ $p=$f->getPathname(); try{
      $compiled=app('blade.compiler')->compileString(\Illuminate\Support\Facades\File::get($p));
      if(function_exists('shell_exec')){ $tmp=storage_path('app/agent/_lint_'.md5($p).'.php'); \Illuminate\Support\Facades\File::put($tmp,$compiled); $out=@shell_exec('php -l '.escapeshellarg($tmp).' 2>&1'); @unlink($tmp); if($out && !str_contains($out,'No syntax errors')) $find[]=['level'=>'error','code'=>'blade.lint','file'=>$p,'msg'=>trim($out)]; }
    } catch(\Throwable $e){ $find[]=['level'=>'error','code'=>'blade.compile','file'=>$p,'msg'=>$e->getMessage()]; } }
    return [$find];
  }
  protected function httpSmoke(): array {
    $base=rtrim(config('app.url'),'/'); $rows=[]; $fails=[];
    foreach(config('agent.smoke_urls',[]) as [$m,$u]){ $url=$base.$u; $t0=microtime(true);
      try{ $r=\Illuminate\Support\Facades\Http::withHeaders(['User-Agent'=>'AgentSmoke/1.0'])->send($m,$url); $ms=(int)round((microtime(true)-$t0)*1000);
        $rows[]=['method'=>$m,'url'=>$url,'status'=>$r->status(),'time_ms'=>$ms,'headers'=>['csp'=>$r->header('Content-Security-Policy'),'xfo'=>$r->header('X-Frame-Options'),'xcto'=>$r->header('X-Content-Type-Options')]];
        if($r->status()>=400) $fails[]=['url'=>$url,'status'=>$r->status()];
      } catch(\Throwable $e){ $fails[]=['url'=>$url,'error'=>$e->getMessage()]; }
    }
    return ['checks'=>$rows,'failures'=>$fails];
  }
  protected function i18nAudit(): array {
    $find=[]; $dir=resource_path('lang'); if(!is_dir($dir)) return [[$find]];
    $keys=[]; foreach(\Illuminate\Support\Facades\File::directories($dir) as $loc){ $locale=basename($loc);
      foreach(\Illuminate\Support\Facades\File::allFiles($loc) as $f){ $arr=include $f->getPathname(); $flat=$this->flatten($arr, pathinfo($f->getFilename(), PATHINFO_FILENAME)); $keys[$locale]=array_values(array_unique(array_merge($keys[$locale]??[],$flat))); } }
    $viewKeys=[]; foreach(\Illuminate\Support\Facades\File::allFiles(resource_path('views')) as $f){ if(!str_ends_with($f->getFilename(),'.blade.php')) continue; $s=\Illuminate\Support\Facades\File::get($f->getPathname());
      preg_match_all("/__\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/",$s,$m1); preg_match_all("/@lang\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/",$s,$m2); $viewKeys=array_merge($viewKeys,$m1[1]??[],$m2[1]??[]); }
    $viewKeys=array_values(array_unique($viewKeys));
    foreach($keys as $locale=>$have){ $missing=array_values(array_diff($viewKeys,$have)); if($missing) $find[]=['level'=>'warn','code'=>'i18n.missing','locale'=>$locale,'missing'=>$missing]; }
    return [$find];
  }
  protected function dbAudit(): array {
    $find=[]; try{ \DB::connection()->getPdo(); } catch(\Throwable $e){ $find[]=['level'=>'error','code'=>'db.connect','msg'=>$e->getMessage()]; return [$find]; }
    try{ \Artisan::call('migrate:status',['--no-interaction'=>true]); $out=\Artisan::output(); if(str_contains($out,'Pending')) $find[]=['level'=>'info','code'=>'db.migrations.pending','msg'=>'There are pending migrations']; }
    catch(\Throwable $e){ $find[]=['level'=>'warn','code'=>'db.migrations','msg'=>$e->getMessage()]; }
    foreach(['jobs','failed_jobs'] as $t){ try{ if(!\Schema::hasTable($t)) $find[]=['level'=>'info','code'=>'db.missing_table','table'=>$t]; } catch(\Throwable $e){} }
    return [$find];
  }
  protected function mailQueueAudit(): array {
    $find=[]; $mailer=config('mail.default') ?? config('mail.mailer'); if(!$mailer) $find[]=['level'=>'warn','code'=>'mail.misconfigured','msg'=>'No mailer configured'];
    $queue=config('queue.default'); if($queue==='sync') $find[]=['level'=>'info','code'=>'queue.sync','msg'=>'Queue driver is sync'];
    return [$find];
  }
  protected function securityAudit(): array {
    $find=[]; $pub=public_path(); foreach(['.env','.git'] as $f){ if(file_exists("$pub/$f")) $find[]=['level'=>'error','code'=>'security.exposed','path'=>"$pub/$f"]; } return [$find];
  }
  protected function perfAudit(): array {
    $find=[]; if(!app()->configurationIsCached()) $find[]=['level'=>'info','code'=>'perf.config_uncached'];
    if(!app()->routesAreCached()) $find[]=['level'=>'info','code'=>'perf.routes_uncached'];
    $vd=base_path('storage/framework/views'); if(!is_dir($vd) || count(glob($vd.'/*'))===0) $find[]=['level'=>'info','code'=>'perf.views_uncached'];
    return [$find];
  }
  protected function logSignals(): array {
    $dir=storage_path('logs'); $sig=[]; $latest=collect(glob("$dir/laravel-*.log"))->sortDesc()->first();
    if($latest && is_readable($latest)){ $tail=@shell_exec('tail -n 500 '.escapeshellarg($latest).' 2>/dev/null');
      foreach(['syntax error','CSRF','QueryException','RouteNotFoundException'] as $s){ if($tail && str_contains(strtolower($tail),strtolower($s))) $sig[]=$s; } }
    return $sig;
  }
  protected function flatten($arr,$prefix=''){ $out=[]; foreach((array)$arr as $k=>$v){ $key=$prefix ? "$prefix.$k" : $k; if(is_array($v)) $out=array_merge($out,$this->flatten($v,$key)); else $out[]=$key; } return $out; }
  public function latestPatchDir(): ?string { $d=collect(glob(storage_path('app/agent/patches/*')))->sortDesc()->values(); return $d->first() ?: null; }
  public function applyLatest(): array { $dir=$this->latestPatchDir(); if(!$dir) return ['applied'=>0,'msg'=>'No staged patches']; $after=collect(\Illuminate\Support\Facades\File::allFiles($dir))->filter(fn($f)=>str_ends_with($f->getFilename(),'.after')); $n=0; foreach($after as $f){ $t=str_replace(['.after',$dir],['',''],$f->getPathname()); @mkdir(dirname($t),0775,true); \Illuminate\Support\Facades\File::copy($f->getPathname(),$t); $n++; } return ['applied'=>$n,'dir'=>$dir]; }
  public function revertLatest(): array { $dir=$this->latestPatchDir(); if(!$dir) return ['reverted'=>0,'msg'=>'No staged patches']; $before=collect(\Illuminate\Support\Facades\File::allFiles($dir))->filter(fn($f)=>str_ends_with($f->getFilename(),'.before')); $n=0; foreach($before as $f){ $t=str_replace(['.before',$dir],['',''],$f->getPathname()); @mkdir(dirname($t),0775,true); \Illuminate\Support\Facades\File::copy($f->getPathname(),$t); $n++; } return ['reverted'=>$n,'dir'=>$dir]; }
}
