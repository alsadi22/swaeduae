<?php
use App\Http\Controllers\Admin\Auth\AdminLoginController;
use App\Http\Controllers\ContactController;
Route::pattern('idOrSlug', '^(?!browse$).+');
// DISABLED: 
Route::get('/events/browse', [\App\Http\Controllers\Public\EventsBrowseController::class, 'index'])->name('events.browse');

// Ensure static route beats events/{idOrSlug}

// Ensure static route beats events/{idOrSlug}

use App\Http\Controllers\Org\OpportunityController;
use App\Http\Controllers\Org\ApplicationReviewController;
// DISABLED: use App\Http\Controllers\Public\EventsBrowseController;
// DISABLED legacy: use App\Http\Controllers\Public\ContactController;
if (file_exists(__DIR__.'/_admin_auth.php')) require __DIR__.'/_admin_auth.php';
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

Route::get('/healthz', fn () => response('ok', 200))->name('health');

/** Public site */
Route::get('/', [\App\Http\Controllers\HomeController::class, 'index'])->name('home');
Route::get('/news', [\App\Http\Controllers\NewsController::class, 'index'])->name('news.index');
Route::get('/news/{id}', [\App\Http\Controllers\NewsController::class, 'show'])->name('news.show');
Route::get('/downloads', [\App\Http\Controllers\DownloadController::class, 'index'])->name('downloads.index');
Route::get('/region/sharjah', [\App\Http\Controllers\EventController::class, 'sharjah'])->name('region.sharjah');
Route::get('/partners', [\App\Http\Controllers\PartnerController::class, 'index'])->name('partners.index');

Route::post('/lang/switch', function (Request $request) {
    $lang = $request->input('lang');
    if (in_array($lang, ['en', 'ar'])) {
        session(['locale' => $lang]);
        app()->setLocale($lang);
    }
    return back();
})->name('lang.switch');

/** Authenticated user actions */
Route::middleware('auth')->group(function () {
    Route::get('/volunteer/profile', \App\Http\Controllers\Volunteer\ProfileIndexAction::class)->name('volunteer.profile');
    Route::post('/volunteer/events/{eventId}/register', [\App\Http\Controllers\VolunteerController::class, 'registerEvent'])->middleware(['form.ratelimit'])->name('volunteer.registerEvent');
    Route::post('/volunteer/kyc/upload', [\App\Http\Controllers\VolunteerController::class, 'uploadKyc'])->middleware(['form.ratelimit'])->name('volunteer.uploadKyc');
    Route::get('/volunteer/resume', [\App\Http\Controllers\VolunteerController::class, 'resume'])->name('volunteer.resume');
    Route::get('/volunteer/certificate/{certId}', [\App\Http\Controllers\VolunteerController::class, 'generateCertificate'])->name('volunteer.generateCertificate');

    Route::get('/payment', [\App\Http\Controllers\PaymentController::class, 'paymentPage'])->name('payments.page');
    Route::post('/payment/stripe', [\App\Http\Controllers\PaymentController::class, 'processStripe'])->name('payments.processStripe');
    Route::post('/payment/paytabs', [\App\Http\Controllers\PaymentController::class, 'processPayTabs'])->name('payments.processPayTabs');
    Route::get('/payment/success', [\App\Http\Controllers\PaymentController::class, 'success'])->name('payments.success');
});

/** Admin */
Route::prefix('admin')->middleware(['auth', 'can:isAdmin'])->group(function () {
    Route::get('/dashboard', [\App\Http\Controllers\Admin\UserAdminController::class, 'dashboard'])->name('admin.dashboard');
    Route::get('/users', [\App\Http\Controllers\Admin\UserAdminController::class, 'listUsers'])->name('admin.users');
    Route::post('/users/toggle/{id}', [\App\Http\Controllers\Admin\UserAdminController::class, 'toggleUserStatus'])->name('admin.users.toggle');
    
    Route::get('/certificates', [\App\Http\Controllers\Admin\UserAdminController::class, 'listCertificates'])->name('admin.certificates');
    Route::post('/backup', [\App\Http\Controllers\Admin\UserAdminController::class, 'backup'])->name('admin.backup');
});

Auth::routes();

/** PUBLIC: verify + gallery (single, closed block) */
Route::match(['GET', 'POST'], '/verify', function (Request $r) {
    $code = trim($r->input('code', ''));
    $result = null;
    if ($code !== '') {
        $result = DB::table('certificates')->where('verification_code', $code)->first();
    }
    return view('public.verify', compact('result', 'code'));
})->name('verify');

Route::get('/gallery', fn () => view('public.gallery'))->name('gallery');

/** Profile routes (preferred) */
Route::middleware(['web','auth'])->group(function () {
    Route::get('/profile', \App\Http\Controllers\Volunteer\ProfileIndexAction::class)->name('profile');
    Route::get('/volunteer/profile', \App\Http\Controllers\Volunteer\ProfileIndexAction::class)->name('volunteer.profile');
});

/** Avatar upload/remove */
Route::middleware(['web','auth'])->group(function () {
    Route::post('/profile/avatar', [\App\Http\Controllers\Volunteer\AvatarController::class,'store'])->name('profile.avatar.store');
    Route::delete('/profile/avatar', [\App\Http\Controllers\Volunteer\AvatarController::class,'destroy'])->name('profile.avatar.destroy');
});

/** Keep public opportunities in a single file (avoids duplication) */
if (file_exists(__DIR__.'/_opportunities.php')) require __DIR__.'/_opportunities.php';
if (file_exists(__DIR__.'/_public.php')) require __DIR__.'/_public.php';

/** Friendly /signin router + alias (no controller dependency) */
Route::get('/signin', function (\Illuminate\Http\Request $r) {
    $type = strtolower($r->query('type',''));
    if (in_array($type, ['organization','organisation','org'])) {
        return redirect()->to('/login?type=organization');
    }
    return redirect()->to('/login?type=volunteer');
})->name('signin');

Route::get('/sign-in', fn() => redirect()->route('signin'));

if (file_exists(__DIR__.'/_scan.php')) require __DIR__.'/_scan.php';

if (file_exists(__DIR__.'/_admin_hours.php')) require __DIR__.'/_admin_hours.php';

if (file_exists(__DIR__.'/_admin_aliases.php')) require __DIR__.'/_admin_aliases.php';

if (file_exists(__DIR__.'/_admin_diag.php')) require __DIR__.'/_admin_diag.php';

if (file_exists(__DIR__.'/_admin_dashboard_override.php')) require __DIR__.'/_admin_dashboard_override.php';

if (file_exists(__DIR__.'/_admin_dashboard_compat.php')) require __DIR__.'/_admin_dashboard_compat.php';

if (file_exists(__DIR__.'/_admin_route_aliases.php')) require __DIR__.'/_admin_route_aliases.php';

if (file_exists(__DIR__.'/_admin_users_fix.php')) require __DIR__.'/_admin_users_fix.php';

if (file_exists(__DIR__.'/_org_register_fix.php')) require __DIR__.'/_org_register_fix.php';


if (file_exists(__DIR__.'/_auth_aliases.php')) require __DIR__.'/_auth_aliases.php';

// include i18n if present
if (file_exists(__DIR__.'/_i18n.php')) require __DIR__.'/_i18n.php';

// Injected: auth POST overrides
// Injected: admin auth POST overrides
use App\Http\Controllers\SitemapController;
Route::get('/sitemap.xml', [SitemapController::class, 'index'])->name('sitemap');
Route::view('/about', 'pages.about')->name('pages.about')->middleware(\App\Http\Middleware\SetLocale::class);
Route::view('/privacy', 'pages.privacy')->name('pages.privacy')->middleware(\App\Http\Middleware\SetLocale::class);
Route::view('/terms', 'pages.terms')->name('pages.terms')->middleware(\App\Http\Middleware\SetLocale::class);
use App\Http\Controllers\LangController;
/* removed duplicate /locale/{locale} route */

// Fallback org logout (POST only), guarded by auth:org
use Illuminate\Support\Facades\Auth;
Route::post('/org/logout', function (Request $request) {
//     Auth::guard()->logout();
    $request->session()->invalidate();
    $request->session()->regenerateToken();
    return redirect('/');
})->middleware(['auth','role:org'])->name('org.logout');
if (file_exists(base_path('routes/events.php'))) {
    // require base_path('routes/events.php');
}

/* === Notifications (P9) === */
use App\Http\Controllers\NotificationController;

Route::middleware(['web','auth'])->group(function () {
    Route::get('/notifications', [NotificationController::class, 'index'])->name('notifications.index');
    Route::post('/notifications/{id}/read', [NotificationController::class, 'markRead'])->name('notifications.read');
    Route::post('/notifications/read-all', [NotificationController::class, 'markAllRead'])->name('notifications.readAll');
    Route::get('/notifications/test', [NotificationController::class, 'test'])->name('notifications.test');
});

/* === P12: Canonical 301 redirects (safe + minimal) === */

Route::permanentRedirect('/dashboard', '/profile')->name('redir.dashboard.profile');
Route::permanentRedirect('/home', '/')->name('redir.home.root');
Route::get('/volunteer/profile', fn() => redirect('/profile', 301))->name('redir.volunteer.profile');
Route::get('/volunteer/dashboard', fn() => redirect('/profile', 301))->name('redir.volunteer.dashboard');
// LEGACY DISABLED: // LEGACY DISABLED: Route::get('/contact', function
// LEGACY DISABLED:     foreach (['contact','pages.contact','argon_front.contact','frontend.contact'] as $v) {
// LEGACY DISABLED:         if (view()->exists($v)) return view($v);
// LEGACY DISABLED:     }
// LEGACY DISABLED:     return response('Contact page coming soon.', 200);
// LEGACY DISABLED: })->name('contact.show');

// ---- compat: organizations.register (keeps old blades working) ----
/* --- Phase 1: observability healthz --- */
\Illuminate\Support\Facades\Route::get('/healthz', function () {
    $okDb = true;
    try { \Illuminate\Support\Facades\DB::select('select 1'); }
    catch (\Throwable $e) { $okDb = false; }

    $queuePending = \Illuminate\Support\Facades\Schema::hasTable('jobs')
        ? \Illuminate\Support\Facades\DB::table('jobs')->count()
        : null;
    $queueFailed = \Illuminate\Support\Facades\Schema::hasTable('failed_jobs')
        ? \Illuminate\Support\Facades\DB::table('failed_jobs')->count()
        : null;

    return response()->json([
        'ok'             => $okDb,
        'time'           => now()->toIso8601String(),
        'app_env'        => config('app.env'),
        'cache'          => config('cache.default'),
        'queue'          => config('queue.default'),
        'queue_pending'  => $queuePending,
        'queue_failed'   => $queueFailed,
    ], 200, ['Cache-Control' => 'no-store']);
})->name('healthz');
Route::middleware(['web','auth','throttle:30,1'])->prefix('admin')->group(function () {
  Route::get('/_diag', function () {
    $now = now();
    $storage = storage_path();
    $free  = @disk_free_space($storage);
    $total = @disk_total_space($storage);
    $usedPct = $total ? round(100 * ($total - $free) / $total, 1) : null;

    $dbOk = false;
    try { \Illuminate\Support\Facades\DB::select('select 1'); $dbOk = true; } catch (\Throwable $e) {}

    $data = [
      'ok'   => true,
      'ts'   => $now->toIso8601String(),
      'app'  => [
        'env'     => config('app.env'),
        'debug'   => (bool) config('app.debug'),
        'laravel' => app()->version(),
        'php'     => PHP_VERSION,
      ],
      'cache' => config('cache.default'),
      'queue' => [
        'driver'  => config('queue.default'),
        'pending' => (int) \Illuminate\Support\Facades\DB::table('jobs')->count(),
        'failed'  => (int) \Illuminate\Support\Facades\DB::table('failed_jobs')->count(),
      ],
      'db'   => ['ok' => $dbOk],
      'disk' => [
        'path'         => $storage,
        'total_bytes'  => $total,
        'free_bytes'   => $free,
        'used_percent' => $usedPct,
      ],
    ];
    return response()->json($data)->header('Cache-Control','no-store');
  })->name('admin.diag');
});
Route::get('/health', function () {
    return response()->json([
        'ok'   => true,
        'time' => now()->toDateTimeString(),
        'env'  => app()->environment(),
    ]);
})->name('health');
Route::get('/health', function () {
    return response()->json([
        'ok'   => true,
        'time' => now()->toDateTimeString(),
        'env'  => app()->environment(),
    ]);
})->name('health');

// Contact routes (Wave1)
// DISABLED legacy: Route::get("/contact", [\App\Http\Controllers\Public\ContactController::class, "show"])->name("contact.show");
// DISABLED legacy: Route::post("/contact", [\App\Http\Controllers\Public\ContactController::class, "send"])->middleware(["throttle:forms"])->middleware(['form.ratelimit'])->name("contact.submit");

Route::get('/_debug_browse', function () {
    config(['app.debug' => true]);     // only for this request
    try {
        return app(\App\Http\Controllers\Public\EventsBrowseController::class)->index();
    } catch (\Throwable $e) {
        \Log::error('events.browse fatal: '.$e->getMessage().' @ '.$e->getFile().':'.$e->getLine(), [
            'trace' => $e->getTraceAsString(),
        ]);
        return response($e->getMessage().' @ '.$e->getFile().':'.$e->getLine(), 500);
    }
});
Route::get('/_match', function (\Illuminate\Http\Request $r) {
    $path = $r->query('path', '/events/browse');
    $req  = \Illuminate\Http\Request::create($path, 'GET');
    $matched = app('router')->getRoutes()->match($req);

    return response()->json([
        'asked_for' => $path,
        'matched_name' => $matched->getName(),
        'matched_uri' => $matched->uri(),
        'action' => $matched->getActionName(),
        'methods' => $matched->methods(),
        'domain'  => method_exists($matched,'domain') ? ($matched->domain() ?: null) : (property_exists($matched,'domain') ? $matched->domain : null),
        'wheres'  => $matched->wheres ?? [],
        'middleware' => $matched->gatherMiddleware(),
    ]);
});
Route::get('/_match', function (\Illuminate\Http\Request $r) {
    $path = $r->query('path', '/events/browse');
    $req  = \Illuminate\Http\Request::create($path, 'GET');
    $matched = app('router')->getRoutes()->match($req);

    return response()->json([
        'asked_for'     => $path,
        'matched_name'  => $matched->getName(),
        'matched_uri'   => $matched->uri(),
        'action'        => $matched->getActionName(),
        'methods'       => $matched->methods(),
        'domain'        => method_exists($matched,'domain') ? ($matched->domain() ?: null) : (property_exists($matched,'domain') ? $matched->domain : null),
        'wheres'        => $matched->wheres ?? [],
        'middleware'    => $matched->gatherMiddleware(),
    ]);
});
Route::get('/_viewcheck', function () {
    return [
        'public.events.browse' => view()->exists('public.events.browse'),
        'public.events.index'  => view()->exists('public.events.index'),
        'events.index'         => view()->exists('events.index'),
        'layout_app'           => view()->exists('layouts.app'),
    ];
});

Route::prefix("/uaepass")->group(function(){
  Route::get("/redirect", [\App\Http\Controllers\Auth\UaePassController::class, "redirect"])->name("uaepass.redirect");
  Route::get("/callback", [\App\Http\Controllers\Auth\UaePassController::class, "callback"])->name("uaepass.callback");
});

/*
|--------------------------------------------------------------------------
| Ops healthcheck
|--------------------------------------------------------------------------
*/

Route::get('/healthz', function () {
    return response('ok', 200)->header('Cache-Control','no-store');
});

// --- Public Apply (minimal) ---
use App\Http\Controllers\PublicSite\ApplyController;
Route::get('/apply', [ApplyController::class, 'form'])->name('apply.form');
Route::post('/apply', [ApplyController::class, 'store'])->middleware(['form.ratelimit'])->name('apply.store');

if (file_exists(__DIR__ . "/_public_pages.php")) { require __DIR__ . "/_public_pages.php"; }
if (file_exists(__DIR__ . '/_admin_attendance.php')) { require __DIR__ . '/_admin_attendance.php'; }

// Auto-added on 2025-08-21T18:03:18+00:00
Route::view('/faq','public.faq')->name('faq');
if (file_exists(__DIR__.'/org.php')) { require __DIR__.'/org.php'; }

// -- contact routes (swaed) --
Route::get('/contact', [ContactController::class, 'show'])->name('contact.show');
Route::post('/contact', [ContactController::class, 'submit'])
    ->middleware(['throttle:forms'])
    ->name('contact.submit');
// SWAED patch: POST /org/login alias to default login
use Illuminate\Support\Facades\Route;
// SwaedUAE: ensure /org lands on org dashboard
Route::redirect('/org', '/org/dashboard', 302)->name('org.home');

// TEMP: retire noisy test path
Route::get('/events/1', function(){ abort(410); });

// Compat: old volunteer login URL
Route::redirect('/volunteer/login', '/login?type=volunteer', 302);

// Compat: allow GET/POST /logout for web & org guards
Route::match(['GET','POST'], '/logout', function(\Illuminate\Http\Request $request){
//     try { \Illuminate\Support\Facades\Auth::guard()->logout(); } catch (\Throwable $e) {}
    try { \Illuminate\Support\Facades\Auth::logout(); } catch (\Throwable $e) {}
    $request->session()->invalidate();
    $request->session()->regenerateToken();
    return redirect('/');
})->name('logout.compat');

// Org login (GET) view

// Override POST /admin/login without honeypot (keeps CSRF intact)
// removed old POST /admin/login route

Route::middleware(["web"])->group(function () {
    // removed old GET /admin/login route


});
// --- END: admin auth (clean) ---


// --- BEGIN: admin auth (clean) ---
Route::middleware(['web'])->group(function () {
    Route::get('/admin/login', [AdminLoginController::class, 'show'])
        ->name('admin.login')
        ->middleware(['guest']);

    Route::post('/admin/login', [AdminLoginController::class, 'login'])
        ->name('admin.login.post')
        ->middleware(['guest'])
        ->withoutMiddleware([
            \App\Http\Middleware\Honeypot::class,      // custom class if exists
            'honeypot',                                 // alias
            \Spatie\Honeypot\ProtectAgainstSpam::class  // spatie class
        ]);
        // For testing only, if 419 persists after Kernel fix, temporarily add:
        // ->withoutMiddleware([\App\Http\Middleware\VerifyCsrfToken::class]);
});
// --- END: admin auth (clean) ---

