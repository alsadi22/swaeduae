#!/usr/bin/env bash
# SwaedUAE Project Health Script
# - Checks environment, ACLs, caches
# - Finds missing Blade route() names
# - Detects Blade @extends() cycles in public views
# - Verifies theme usage & route guards
# - Confirms PWA files
# Usage:
#   ./tools/health.sh [--fix] [project_dir]
# Default project_dir = /var/www/swaeduae

set -Eeuo pipefail

PROJECT_DIR="${2:-${1:-/var/www/swaeduae}}"
FIX="0"
if [[ "${1:-}" == "--fix" ]]; then
  FIX="1"
fi

cd "$PROJECT_DIR" 2>/dev/null || {
  echo "❌ Project dir not found: $PROJECT_DIR"
  exit 1
}

# ---------- UI helpers ----------
if command -v tput >/dev/null 2>&1; then
  GREEN="$(tput setaf 2)"; YELLOW="$(tput setaf 3)"; RED="$(tput setaf 1)"; BOLD="$(tput bold)"; RESET="$(tput sgr0)"
else
  GREEN=""; YELLOW=""; RED=""; BOLD=""; RESET=""
fi
ok(){   echo -e "${GREEN}✅${RESET} $*"; }
warn(){ echo -e "${YELLOW}⚠️ ${RESET} $*"; }
fail(){ echo -e "${RED}❌${RESET} $*"; }
hdr(){  echo -e "\n${BOLD}== $* ==${RESET}"; }

# ---------- prereq helpers ----------
need_cmd() {
  if ! command -v "$1" >/dev/null 2>&1; then
    if [[ "$FIX" == "1" ]]; then
      warn "Missing '$1' — attempting to install via apt..."
      sudo apt-get update -y >/dev/null 2>&1 || true
      sudo apt-get install -y "$1" >/dev/null 2>&1 || true
    fi
  fi
  command -v "$1" >/dev/null 2>&1 || return 1
}

# ---------- sanity: is this a laravel project? ----------
if [[ ! -f composer.json || ! -d artisan && ! -f artisan ]]; then
  fail "Not a Laravel project (composer.json or artisan missing)"
  exit 1
fi

# ---------- 0) Environment ----------
hdr "Environment"
PHPV="$(php -v 2>/dev/null | head -n1 || true)"
LARV="$(php artisan --version 2>/dev/null || true)"
NODEV="$(node -v 2>/dev/null || true)"
COMPV="$(composer --version 2>/dev/null || true)"
MEMLIM="$(php -r 'echo ini_get("memory_limit"), PHP_EOL;' 2>/dev/null || true)"
echo "PHP:     $PHPV"
echo "Laravel: $LARV"
echo "Node:    ${NODEV:-n/a}"
echo "Composer:${COMPV:-n/a}"
echo "PHP memory_limit: ${MEMLIM:-n/a}"
ok "Env read"

# ---------- 1) ACLs for storage & cache ----------
hdr "Permissions & ACL"
need_cmd setfacl || { warn "ACL tool 'setfacl' missing; run: sudo apt-get install -y acl"; }
WEBUSER="www-data"
APPUSER="${SUDO_USER:-$USER}"

if [[ "$FIX" == "1" ]] && command -v setfacl >/dev/null 2>&1; then
  sudo setfacl -R  -m u:$WEBUSER:rwx -m u:$APPUSER:rwx storage bootstrap/cache || true
  sudo setfacl -dR -m u:$WEBUSER:rwx -m u:$APPUSER:rwx storage bootstrap/cache || true
  ok "Applied ACLs for $WEBUSER and $APPUSER on storage/ & bootstrap/cache/"
fi

# test write as current user
touch storage/logs/_health_write_test.log 2>/dev/null && rm -f storage/logs/_health_write_test.log \
  && ok "Current user can write storage/logs" || warn "Current user cannot write storage/logs"

# ---------- 2) Caches ----------
hdr "Caches"
if [[ "$FIX" == "1" ]]; then
  php artisan optimize:clear >/dev/null && ok "optimize:clear"
  php artisan config:cache   >/dev/null && ok "config:cache"
  php artisan route:cache    >/dev/null && ok "route:cache"
  php artisan view:cache     >/dev/null && ok "view:cache"
else
  php artisan optimize:clear >/dev/null && ok "optimize:clear (dry)"
  php artisan config:cache   >/dev/null && ok "config:cache (dry)"
  php artisan route:cache    >/dev/null && ok "route:cache (dry)"
  php artisan view:cache     >/dev/null && ok "view:cache (dry)"
fi

# ---------- 3) Blade route() names vs defined routes ----------
hdr "Blade route() names vs. defined route names"

TMPDIR="$(mktemp -d)"
BLADE_NAMES="$TMPDIR/blade-route-names.txt"
ROUTES_JSON="$TMPDIR/routes.json"
DEFINED_NAMES="$TMPDIR/defined-route-names.txt"
MISSING_NAMES="$TMPDIR/missing-route-names.txt"

# extract route() names from Blade
# matches route('name') and route("name")
grep -RnoE "route\(\s*'[^']+'|route\(\s*\"[^\"]+\"" resources/views \
  | sed -E "s/.*route\(\s*['\"]([^'\"]+)['\"].*/\1/" \
  | sort -u > "$BLADE_NAMES" || true

# get defined route names (JSON available in Laravel 11)
php artisan route:list --json > "$ROUTES_JSON" 2>/dev/null || {
  fail "Unable to get routes JSON"; exit 1;
}

# parse JSON -> names (prefer jq, fallback to PHP)
if need_cmd jq; then
  jq -r '.[].name' "$ROUTES_JSON" 2>/dev/null | grep -v -E '^\s*$' | sort -u > "$DEFINED_NAMES"
else
  php -r '
  $j=json_decode(file_get_contents("'"$ROUTES_JSON"'"),true);
  $n=[]; foreach($j as $r){ if(!empty($r["name"])) $n[$r["name"]]=1; }
  ksort($n); file_put_contents("'"$DEFINED_NAMES"'", implode(PHP_EOL, array_keys($n)));
  ' 2>/dev/null
fi

sort -u -o "$BLADE_NAMES" "$BLADE_NAMES"
sort -u -o "$DEFINED_NAMES" "$DEFINED_NAMES"

comm -23 "$BLADE_NAMES" "$DEFINED_NAMES" > "$MISSING_NAMES" || true

MISS_COUNT="$(wc -l < "$MISSING_NAMES" | tr -d ' ')"
if [[ "$MISS_COUNT" -eq 0 ]]; then
  ok "No missing route() names in Blade"
else
  warn "Missing $MISS_COUNT route() names (Blade → no defined route). See list below:"
  nl -ba "$MISSING_NAMES" | sed -e 's/^/   /'
fi

# ---------- 4) Detect Blade @extends() cycles in public/ ----------
hdr "Blade layout cycle check (public/)"

EXT_TSV="$TMPDIR/extends.tsv"
grep -RnoE '^\s*@extends\(\s*["'\'''][^"'\''"]+["'\''']\s*\)' resources/views/public \
  | sed -E 's#^([^:]+):[0-9]+:\s*@extends\(\s*["'\'']([^"'\''"]+)["'\''].*#\1\t\2#' > "$EXT_TSV" || true

CYCLES="$TMPDIR/cycles.txt"
awk -F'\t' '
  { e[$1,$2]=1; files[$1]=1; }
  END {
    found=0;
    for (k in e) {
      split(k,a,SUBSEP);
      rev=a[2] SUBSEP a[1];
      if (e[rev]) { print a[1] " <-> " a[2]; found=1; }
    }
    if (found==0) { } else { }
  }
' "$EXT_TSV" > "$CYCLES"

if [[ -s "$CYCLES" ]]; then
  fail "Detected @extends() 2-cycles in public/:"
  nl -ba "$CYCLES" | sed -e 's/^/   /'
else
  ok "No @extends() 2-cycles in public/"
fi

# Check that base layout is not extending anything
if grep -q '^\s*@extends\(' resources/views/public/layout.blade.php 2>/dev/null; then
  fail "public/layout.blade.php must NOT extend another layout (it should be a base)."
else
  ok "public/layout.blade.php is a base (no @extends) ✔"
fi

# ---------- 5) Theme usage sanity ----------
hdr "Theme usage (TravelPro for public, Argon for admin/org)"
PUB_TP_COUNT="$(grep -Rno '^@extends\("public\.layout-travelpro"\)' resources/views/public | wc -l | tr -d ' ')"
PUB_BASE_COUNT="$(grep -Rno '^@extends\("public\.layout"\)' resources/views/public | wc -l | tr -d ' ')"
ADM_ARGON_COUNT="$(grep -Rno '^@extends\("layouts\.admin-argon"\)' resources/views/admin | wc -l | tr -d ' ' || true)"
ORG_ARGON_COUNT="$(grep -Rno '^@extends\("org\.layout"\)' resources/views/org | wc -l | tr -d ' ' || true)"

echo "Public extends TravelPro: $PUB_TP_COUNT"
echo "Public extends Base:      $PUB_BASE_COUNT"
echo "Admin extends Argon:      ${ADM_ARGON_COUNT:-0}"
echo "Org extends Argon:        ${ORG_ARGON_COUNT:-0}"
ok "Theme usage enumerated"

# ---------- 6) Guards on route groups ----------
hdr "Route guard groups (admin/org)"
ADMIN_GUARD="$(grep -nE "prefix\(['\"]admin['\"]\).*middleware\(\[.*auth:admin" routes/web.php | head -n1 || true)"
ORG_GUARD="$(grep -nE "prefix\(['\"]org['\"]\).*middleware\(\[.*auth:org" routes/web.php | head -n1 || true)"

if [[ -n "$ADMIN_GUARD" ]]; then ok "Admin group has auth:admin → $ADMIN_GUARD"; else warn "Admin group missing auth:admin"; fi
if [[ -n "$ORG_GUARD" ]];   then ok "Org group has auth:org     → $ORG_GUARD";   else warn "Org group missing auth:org";   fi

# ---------- 7) PWA presence ----------
hdr "PWA files"
[[ -f public/manifest.json ]]     && ok "manifest.json present" || warn "manifest.json missing"
[[ -f public/service-worker.js ]] && ok "service-worker.js present" || warn "service-worker.js missing"

# ---------- 8) Verify key routes we rely on ----------
hdr "Key route sanity"
grep -q '"qr\.verify"' "$ROUTES_JSON" && ok "qr.verify route is present" || warn "qr.verify route missing"
grep -q '"verify\.show"' "$ROUTES_JSON" && ok "verify.show route is present" || warn "verify.show route missing"
grep -q '"home"' "$ROUTES_JSON" && ok "home route is present" || warn "home route missing"

# ---------- 9) Optional FIX summary ----------
if [[ "$FIX" == "1" ]]; then
  hdr "Fixes Applied"
  ok "ACLs (storage/, bootstrap/cache/) & caches rebuilt"
fi

# ---------- 10) Summary ----------
hdr "Summary"
EXIT=0
if [[ "$MISS_COUNT" -gt 0 ]]; then EXIT=1; fi
if [[ -s "$CYCLES" ]]; then EXIT=1; fi

if [[ "$EXIT" -eq 0 ]]; then
  ok "Health checks passed"
else
  fail "Health checks found issues"
fi

echo -e "\nℹ️  Artifacts:"
echo "   - Blade route names:      $BLADE_NAMES"
echo "   - Defined route names:    $DEFINED_NAMES"
echo "   - Missing route names:    $MISSING_NAMES"
echo "   - Extends graph (public): $EXT_TSV"
echo "   - Extends cycles:         $CYCLES"

exit "$EXIT"
