<?php
use Illuminate\Support\Facades\Route;

$load = function(string $file) {
    $p = __DIR__ . '/' . $file;
    if (file_exists($p)) require $p;
};

/* --- SAFE PARTIALS (linted) --- */
$load('_deny_dev_routes.php');
$load('_early_auth_overrides.php');
$load('_auth_overrides.php');
$load('_auth_aliases.php');

/* Public / Static / QR */
$load('_public_static.php');
$load('_public_pages.php');
$load('_public.php');
$load('_qr_verify_entry.php');
$load('_qr_public.php');

/* Org/Admin packs (stable). IMPORTANT: skip admin alias pack to avoid duplicate names. */
$load('org.php');
$load('org_shortlist.php');
$load('admin.php');
// $load('_admin_route_aliases.php'); // disabled to avoid duplicates like admin.users.index

/* Redirect helpers */
$load('_redirects.php');

/* --- FALLBACKS (guarantee critical public routes by name) --- */
if (!Route::has('home')) { Route::get('/', fn() => view('home'))->name('home'); }
if (!Route::has('about')) { Route::view('/about','about')->name('about'); }
if (!Route::has('privacy')) { Route::view('/privacy','privacy')->name('privacy'); }
if (!Route::has('terms')) { Route::view('/terms','terms')->name('terms'); }

/* Opportunities (public) — only if not already defined in a partial */
if (!Route::has('opportunities.index')) {
    $c = \App\Http\Controllers\PublicOpportunityController::class;
    Route::get('/opportunities',        [$c,'index'])->name('opportunities.index');
    Route::get('/opportunities/{slug}', [$c,'show'])->name('opportunities.show');
    Route::post('/opportunities/{slug}/apply', [$c,'apply'])->name('opportunities.apply');
    Route::get('/opportunities/{slug}.ics',    [$c,'ics'])->name('opportunities.ics');
}

/* --- PUBLIC ROUTE NAME COMPAT (keeps header links from 500ing) --- */
if (!Route::has('contact.get')) {
    // Contact page view already exists; map both 'contact.get' and 'contact'
    Route::view('/contact', 'contact')->name('contact.get');
    if (!Route::has('contact')) Route::view('/contact', 'contact')->name('contact');
}
foreach (['pages.about' => '/about', 'pages.privacy' => '/privacy', 'pages.terms' => '/terms'] as $legacy => $uri) {
    if (!Route::has($legacy)) {
        Route::get($uri, fn() => view(trim($uri, '/')))->name($legacy);
    }
}
if (!Route::has('qr.verify')) {
    // Ensure a named route exists even if a partial already created /qr/verify
    Route::get('/qr/verify/{code?}', function (?string $code = null) {
        if ($code) return redirect('/qr/verify/'.rawurlencode($code));
        // show form if you have it; else a minimal response
        return view()->exists('qr.verify') ? response()->view('qr.verify', [], 200)
                                           : response('Verify page', 200);
    })->name('qr.verify');
}

/* PUBLIC BASIC PAGES (guarantee) */
if (!Route::has('about'))   { Route::view('/about', 'about')->name('pages.about'); }
if (!Route::has('privacy')) { Route::view('/privacy', 'privacy')->name('pages.privacy'); }
if (!Route::has('terms'))   { Route::view('/terms', 'terms')->name('pages.terms'); }
if (!Route::has('contact')) { Route::view('/contact','contact')->name('contact'); }

/* PUBLIC BASICS (names guaranteed) */
if (!Route::has('home'))    { Route::get('/',    fn() => view('home'))->name('home'); }
if (!Route::has('about'))   { Route::view('/about',   'about')->name('about'); }
if (!Route::has('privacy')) { Route::view('/privacy', 'privacy')->name('privacy'); }
if (!Route::has('terms'))   { Route::view('/terms',   'terms')->name('terms'); }
if (!Route::has('contact')) { Route::view('/contact', 'contact')->name('contact'); }

/* LANG SWITCH (compat for header links) */
if (!Route::has('lang.switch')) {
    Route::get('/lang/{locale}', function ($locale) {
        $supported = ['en','ar'];
        if (!in_array($locale, $supported, true)) $locale = 'en';
        session(['locale'=>$locale]);
        app()->setLocale($locale);
        return back();
    })->name('lang.switch');
}

/* CONTACT FALLBACKS (idempotent) */
if (!Route::has('contact'))        { Route::view('/contact', 'contact')->name('contact'); }
if (!Route::has('contact.submit')) {
    Route::post('/contact', function (\Illuminate\Http\Request $r) {
        $data = $r->validate([
            'name'    => 'nullable|string|max:100',
            'email'   => 'nullable|email|max:160',
            'message' => 'required|string|max:5000',
        ]);
        try {
            // Best-effort log only; wire Mail later if desired
            \Log::info('Contact form', $data);
        } catch (\Throwable $e) {}
        return back()->with('ok','Message sent');
    })->name('contact.submit');
}
use Illuminate\Support\Facades\DB;

if (!Route::has('my.profile')) {
    Route::get('/my/profile', function () {
        $events = DB::table('events')->count();
        $certs  = DB::table('certificates')->count();
        $hours  = DB::table('hours')->sum('hours');

        $recentCerts = DB::table('certificates')
            ->select('uuid','issued_at')
            ->orderByDesc('issued_at')
            ->limit(6)->get();

        return view('my.profile', [
            'totals' => [
                'events' => $events,
                'certs'  => $certs,
                'hours'  => (float) $hours,
            ],
            'recentCerts' => collect($recentCerts)->map(function($r){
                $r = (array)$r;
                return (object) ['uuid'=>$r['uuid'] ?? '', 'issued_at'=>\Illuminate\Support\Carbon::parse($r['issued_at'] ?? null)];
            }),
        ]);
    })->name('my.profile');
}
use Illuminate\Support\Facades\DB;

/* Rich profile (data-driven, read-only) */
if (!Route::has('my.profile.rich')) {
    Route::get('/my/profile/rich', function () {
        $activities = (int) DB::table('events')->count();
        $hours = (float) DB::table('hours')->sum('hours');
        $certs = (int) DB::table('certificates')->count();
        $last = DB::table('events')->max('starts_at') ?? DB::table('certificates')->max('issued_at');

        $metrics = [
            'activities'    => $activities,
            'hours'         => round($hours, 2),
            'donations'     => '$0', // not tracked yet
            'last_activity' => $last ? \Illuminate\Support\Carbon::parse($last)->format('Y-m-d') : '',
            'impact'        => '$'.number_format($hours * 30, 2), // simple proxy
        ];

        $profile = [
            'name' => 'Volunteer',
            'member_since' => now()->subDays(180)->format('Y-m-d'),
            'status' => 'member',
            'email' => env('MAIL_FROM_ADDRESS',''),
            'mobile'=> '',
            'address'=> '',
            'age'=> '—',
            'photo'=> '/images/avatar-default.svg',
            'emergency'=> ['name'=>'','relationship'=>'','mobile'=>''],
        ];

        $recent = DB::table('events')->orderByDesc('starts_at')->limit(6)
            ->get(['title as event','starts_at'])->map(function($r){
                return ['event'=>$r->event, 'date'=> optional($r->starts_at)->format('Y-m-d'), 'note'=>''];
            })->toArray();

        $waivers = []; // future: wire when table exists

        return view('my.profile_rich', compact('metrics','profile','recent','waivers'));
    })->name('my.profile.rich');
}

/* Visual demo (static) */
if (!Route::has('my.profile.demo')) {
    Route::view('/my/profile/demo','my.profile_demo')->name('my.profile.demo');
}
