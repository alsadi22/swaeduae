<?php

// === CLEAN HEADER (single open tag will be added below) ===
use App\Http\Controllers\ContactController;
use App\Http\Controllers\PublicController;

Route::get('/lang/{locale}', function ($locale) {
    app()->setLocale($locale);
    session()->put('app_locale', $locale);
    return back();
})->name('lang.switch');

// Public pages
Route::middleware('throttle:60,1')->group(function () {
    Route::get('/',         [PublicController::class, 'home'])->name('home');
    Route::get('/about',    [PublicController::class, 'about'])->name('about');
    Route::get('/services', [PublicController::class, 'services'])->name('services');
});

Route::get('/contact-us', fn () => view('public.contact'))->name('contact.show');
Route::redirect('/contact', '/contact-us', 302);

Route::post('/contact', [ContactController::class, 'submit'])
    ->middleware(app()->environment('testing') ? [] : ['throttle:5,1','form.ratelimit'])
    ->name('contact.send');
// === END HEADER ===

// robots.txt (plain)
Route::get('/robots.txt', function () {
    $site = config('app.url', url('/'));
    return response("User-agent: *\nAllow: /\nSitemap: {$site}/sitemap.xml\n", 200)
        ->header('Content-Type', 'text/plain');
})->name('robots.txt');

// sitemap.xml (minimal)
Route::get('/sitemap.xml', function () {
    $urls = [
        route('home'),
        route('about'),
        route('services'),
        route('contact.show'),
    ];
    $xml = '<?xml version="1.0" encoding="UTF-8"?>'
         . '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'
         . implode('', array_map(fn($u) => '<url><loc>' . e($u) . '</loc></url>', $urls))
         . '</urlset>';
    return response($xml, 200)->header('Content-Type', 'application/xml');
})->name('sitemap');

/* Agent routes loader (no web access unless enabled) */
if (config('agent.enabled') && file_exists(__DIR__.'/agent.php')) {
    require __DIR__.'/agent.php';
}
/* --- TEMP: compatibility route-name aliases --- */
Route::get('/_alias/privacy', fn() => redirect()->route('pages.privacy'))->name('privacy');
Route::get('/_alias/terms', fn() => redirect()->route('pages.terms'))->name('terms');
Route::get('/_alias/contact', fn() => redirect()->route('contact.show'))->name('contact');
// Alias legacy route name used in Blade: pages.about -> about
Route::get('/_alias/about', fn() => redirect()->route('about'))->name('pages.about');
/* --- END TEMP --- */
/* --- TEMP SAFE ALIASES: prevent route() exceptions on legacy names --- */
Route::get('/_alias/faq', fn() => redirect()->route('faq'))->name('pages.faq');
Route::get('/_alias/login-volunteer', fn() => redirect()->route('login'))->name('login.volunteer');

Route::get('/_alias/public-events', fn() => redirect()->route('events.index'))->name('public.events');
Route::get('/_alias/public-opps', fn() => redirect()->route('opportunities.index'))->name('public.opportunities');
Route::get('/_alias/public-orgs', fn() => redirect()->route('partners'))->name('public.organizations');

/* detail aliases: keep {id} param intact */
Route::get('/_alias/public-opps/{id}', fn($id) => redirect()->route('opps.public.show', ['id'=>$id]))->name('public.opportunities.show');
Route::get('/_alias/opportunities/{id}', fn($id) => redirect()->route('opps.public.show', ['id'=>$id]))->name('opportunities.show');
/* --- END TEMP --- */
if (file_exists(__DIR__.'/compat.php')) { if (file_exists(__DIR__.'/compat.php')) { if (file_exists(__DIR__.'/compat.php')) { require __DIR__.'/compat.php'; } } }
/* ==== PHASE0_MISSING_ROUTE_ALIASES (auto-added 2025-08-28) ==== */
use Illuminate\Http\Request;

if (!function_exists('phase0_defined')) {
    function phase0_defined($name) { return \Illuminate\Support\Facades\Route::has($name); }
}

/* verify.show → /verify?code=... */
if (!phase0_defined('verify.show')) {
    Route::get('/verify/{code}', function (string $code) {
        return redirect('/verify?code='.$code);
    })->name('verify.show');
}

/* my.hours */
if (!phase0_defined('my.hours')) {
    Route::middleware('auth')->get('/me/hours', function () {
        return view()->exists('volunteer.hours')
            ? view('volunteer.hours')
            : response('My Hours (WIP)', 200);
    })->name('my.hours');
}

/* volunteer.profile.update / vol.profile.update */
if (!phase0_defined('volunteer.profile.update')) {
    Route::middleware('auth')->match(['post','patch'],'/volunteer/profile', function (Request $r) {
        return response('volunteer.profile.update (WIP)', 200);
    })->name('volunteer.profile.update');
}
if (!phase0_defined('vol.profile.update')) {
    Route::middleware('auth')->match(['post','patch'],'/my/profile', fn() => response('vol.profile.update (WIP)',200))->name('vol.profile.update');
}

/* profile.update / profile.destroy */
if (!phase0_defined('profile.update')) {
    Route::middleware('auth')->patch('/profile', fn() => response('profile.update (WIP)',200))->name('profile.update');
}
if (!phase0_defined('profile.destroy')) {
    Route::middleware('auth')->delete('/profile', fn() => response('profile.destroy (WIP)',200))->name('profile.destroy');
}

/* admin.root / org.root */
// admin.root handled explicitly below; do not predefine here
if (!phase0_defined('org.root')) {
    Route::get('/org', fn() => redirect('/org/login'))->name('org.root');
}

/* organizations.register → /org/register */
if (!phase0_defined('organizations.register')) {
    Route::get('/organizations/register', fn() => redirect('/org/register'))->name('organizations.register');
}

/* opportunities.withdraw */
if (!phase0_defined('opportunities.withdraw')) {
    Route::middleware('auth')->post('/opportunities/{id}/withdraw', function ($id) {
        return back()->with('status','Withdraw (WIP)');
    })->name('opportunities.withdraw');
}

/* profile.avatar.{store,destroy} */
if (!phase0_defined('profile.avatar.store')) {
    Route::middleware('auth')->post('/profile/avatar', fn() => response('profile.avatar.store (WIP)',200))->name('profile.avatar.store');
}
if (!phase0_defined('profile.avatar.destroy')) {
    Route::middleware('auth')->delete('/profile/avatar', fn() => response('profile.avatar.destroy (WIP)',200))->name('profile.avatar.destroy');
}

/* org attendance indexes */
if (!phase0_defined('org.opportunities.attendance.index')) {
    Route::middleware('auth')->get('/org/opportunities/{opportunity}/attendance',
        fn($opportunity) => response("Attendance for opportunity {$opportunity} (WIP)",200)
    )->name('org.opportunities.attendance.index');
}
if (!phase0_defined('org.events.attendance.index')) {
    Route::middleware('auth')->get('/org/events/{event}/attendance',
        fn($event) => response("Attendance for event {$event} (WIP)",200)
    )->name('org.events.attendance.index');
}
/* ==== /PHASE0_MISSING_ROUTE_ALIASES ==== */
/* === MVP Public pages (Phase-1, cleanup) === */
/* === Phase-1: ensure home & services routes exist (idempotent) === */
if (!\Illuminate\Support\Facades\Route::has('home')) {
    Route::get('/', fn() => view()->exists('public.home') ? view('public.home') : response('Home (WIP)',200))->name('home');
}
if (!\Illuminate\Support\Facades\Route::has('services')) {
    Route::get('/services', fn() => view()->exists('public.services') ? view('public.services') : response('Services (WIP)',200))->name('services');
}
/* Alias: /contact -> /contact-us */
if (!\Illuminate\Support\Facades\Route::has('contact.get')) {
    Route::get('/contact', fn() => redirect()->route('contact.show'))->name('contact.get');
}
/* Alias old theme path -> services */
if (!\Illuminate\Support\Facades\Route::has('destination.alias')) {
    \Illuminate\Support\Facades\Route::redirect('/destination', '/services', 301)->name('destination.alias');
}

// no test-specific route overrides; tests should exercise real controller

// Volunteer Social (generic driver route; keep names unique to avoid clashes with compat stubs)
Route::get('/auth/{driver}/redirect', [\App\Http\Controllers\Auth\SocialAuthController::class,'redirect'])->name('social.generic.redirect');
Route::get('/auth/{driver}/callback', [\App\Http\Controllers\Auth\SocialAuthController::class,'callback'])->name('social.generic.callback');
// Back-compat generic name used in blades: social.redirect
Route::get('/auth/redirect/{driver}', [\App\Http\Controllers\Auth\SocialAuthController::class,'redirect'])->name('social.redirect');
// Explicit provider aliases (stable names used in blades)
Route::get('/auth/google/redirect', [\App\Http\Controllers\Auth\SocialAuthController::class, 'redirect'])
    ->defaults('driver','google')->name('social.google.redirect');
Route::get('/auth/google/callback', [\App\Http\Controllers\Auth\SocialAuthController::class, 'callback'])
    ->defaults('driver','google')->name('social.google.callback');
Route::get('/auth/facebook/redirect', [\App\Http\Controllers\Auth\SocialAuthController::class, 'redirect'])
    ->defaults('driver','facebook')->name('social.facebook.redirect');
Route::get('/auth/facebook/callback', [\App\Http\Controllers\Auth\SocialAuthController::class, 'callback'])
    ->defaults('driver','facebook')->name('social.facebook.callback');
// UAE PASS provider aliases (used in some blades)
Route::get('/auth/uaepass/redirect', [\App\Http\Controllers\Auth\SocialAuthController::class, 'redirect'])
    ->defaults('driver','uaepass')->name('uaepass.redirect');
Route::get('/auth/uaepass/callback', [\App\Http\Controllers\Auth\SocialAuthController::class, 'callback'])
    ->defaults('driver','uaepass')->name('uaepass.callback');

// Email login alias used in some blades
Route::get('/login/email', fn() => redirect()->route('login'))->name('login.email');

// Public Organizations directory routes used by views
Route::get('/organizations', fn () => view()->exists('organizations.public.index') ? view('organizations.public.index') : view('public.organizations.index'))
    ->name('orgs.public.index');
Route::get('/organizations/{id}/{slug?}', fn ($id, $slug = null) => view()->exists('organizations.public.show')
        ? view('organizations.public.show', compact('id','slug'))
        : (view()->exists('public.organizations.show') ? view('public.organizations.show', compact('id','slug')) : response('Organization',200)))
    ->name('orgs.public.show');

// Certificates routes to satisfy blade links (minimal stubs if controllers absent)
Route::middleware('auth')->group(function () {
    Route::get('/my/certificates', fn () => view()->exists('my.certificates') ? view('my.certificates') : response('My Certificates (WIP)', 200))
        ->name('my.certificates');
    Route::get('/my/certificates/{id}/download', fn ($id) => response('Download certificate '.$id.' (WIP)', 200))
        ->name('my.certificates.download');
});
Route::get('/certificates/{code}', fn (string $code) => response('Certificate '.$code.' (WIP)', 200))
    ->name('certificates.show');
Route::get('/verify/cert/{code}', fn (string $code) => redirect()->route('verify.show', ['code' => $code]))
    ->name('certificates.verify');
// Legacy name alias
Route::get('/me/certificates', fn () => redirect()->route('my.certificates'))->name('certificates.my');
/* === Volunteer clean aliases & routes === */
// Volunteer login/register aliases -> core auth routes
Route::get('/volunteer/login', fn() => redirect()->route('login'))->name('volunteer.login');
Route::get('/volunteer/register', fn() => redirect()->route('register'))->name('volunteer.register');

// Volunteer dashboard alias -> profile (once signed in)
Route::middleware('auth')->get('/volunteer/dashboard', fn() => redirect()->route('profile'))->name('volunteer.dashboard');

// Volunteer profile routes (avoid duplicate 'profile.update' name collisions)
if (!Route::has('profile')) {
    Route::middleware('auth')->get('/profile', \App\Http\Controllers\Volunteer\ProfileIndexAction::class)->name('profile');
}
if (!Route::has('volunteer.profile')) {
    Route::middleware('auth')->get('/volunteer/profile', fn() => redirect()->route('profile'))->name('volunteer.profile');
}

// FAQ page (used by aliases)
if (!Route::has('faq')) {
    Route::view('/faq', view()->exists('public.faq') ? 'public.faq' : (view()->exists('pages.faq') ? 'pages.faq' : 'public.not-implemented'))
        ->name('faq');
}

/* === Organization stubs (login/register/dashboard) === */
Route::prefix('org')->middleware('web')->group(function () {
    Route::get('/login', [\App\Http\Controllers\OrgAuthController::class,'showLogin'])->name('org.login');
    Route::post('/login', [\App\Http\Controllers\OrgAuthController::class,'performLogin'])->name('org.login.perform');
    Route::get('/register', [\App\Http\Controllers\OrgAuthController::class,'showRegister'])->name('org.register');
    Route::post('/register', [\App\Http\Controllers\OrgAuthController::class,'submitRegister'])->name('org.register.submit');
    Route::get('/pending', [\App\Http\Controllers\OrgAuthController::class,'pending'])->name('org.pending');
    Route::middleware([\App\Http\Middleware\OrgAuth::class, \App\Http\Middleware\OrgApproved::class])
        ->get('/dashboard', fn () => view('org.dashboard'))->name('org.dashboard');
});

/* ===== Payments (public) ===== */
use App\Http\Controllers\PaymentController;
Route::get('/donate', [PaymentController::class,'donateForm'])->name('donate.form');
Route::post('/donate', [PaymentController::class,'donate'])->name('donate.post');
Route::get('/payment/success', [PaymentController::class,'success'])->name('payment.success');
Route::get('/payment/cancel', [PaymentController::class,'cancel'])->name('payment.cancel');
Route::post('/webhooks/stripe', [PaymentController::class,'webhook'])->name('webhooks.stripe');

/* ===== Admin: Payments ===== */
use App\Http\Controllers\Admin\PaymentSettingsController;
use App\Http\Controllers\Admin\PaymentAdminController;
Route::middleware(['auth:admin', \App\Http\Middleware\AdminOnly::class])->prefix('admin')->name('admin.')->group(function () {
    Route::get('/settings/payments', [PaymentSettingsController::class,'edit'])->name('settings.payments');
    Route::post('/settings/payments', [PaymentSettingsController::class,'update'])->name('settings.payments.save');
    Route::get('/payments', [PaymentAdminController::class,'index'])->name('payments.index');
    Route::get('/settings/api', [\App\Http\Controllers\Admin\IntegrationSettingsController::class,'edit'])->name('settings.api');
    Route::post('/settings/api', [\App\Http\Controllers\Admin\IntegrationSettingsController::class,'update'])->name('settings.api.save');
    // Orgs moderation
    Route::get('/orgs/pending', [\App\Http\Controllers\Admin\OrgModerationController::class,'pending'])->name('orgs.pending');
    Route::get('/orgs/{org}', [\App\Http\Controllers\Admin\OrgModerationController::class,'show'])->name('orgs.show');
    Route::post('/orgs/{org}/approve', [\App\Http\Controllers\Admin\OrgModerationController::class,'approve'])->name('orgs.approve');
    Route::post('/orgs/{org}/reject', [\App\Http\Controllers\Admin\OrgModerationController::class,'reject'])->name('orgs.reject');
});

// Admin routes are defined in routes/admin.php (single source of truth)

// Phase-0 stub clean-up: send old stub dashboard to admin
Route::redirect('/__stub/dashboard', '/admin', 301);

/* ===== Compatibility Stubs (to satisfy legacy Blade route() names) ===== */
// Jetstream-style dashboard/profile edit
Route::middleware('auth')->group(function () {
    if (!Route::has('dashboard')) {
        Route::get('/dashboard', fn () => redirect()->route('profile'))->name('dashboard');
    }
    if (!Route::has('profile.edit')) {
        Route::get('/profile/edit', fn () => redirect()->route('profile'))->name('profile.edit');
    }
});

// Certificates & transcript
if (!Route::has('certificates.pdf')) {
    Route::get('/certificates/{uuid}.pdf', fn ($uuid) => response('Certificate PDF '.$uuid.' (WIP)', 200))->name('certificates.pdf');
}
if (!Route::has('transcript.pdf')) {
    Route::get('/transcript.pdf', fn () => response('Transcript PDF (WIP)', 200))->name('transcript.pdf');
}

// Attendance checkin/checkout (QR compat)
if (!Route::has('attendance.checkin')) {
    Route::match(['GET','POST'], '/attendance/checkin', function () {
        return redirect()->route('scan.checkin');
    })->name('attendance.checkin');
}
if (!Route::has('attendance.checkout')) {
    Route::match(['GET','POST'], '/attendance/checkout', function () {
        return redirect()->route('scan.checkout');
    })->name('attendance.checkout');
}

// Opportunities apply
if (!Route::has('opportunities.apply')) {
    Route::middleware(['auth','form.ratelimit'])->post('/opportunities/{id}/apply', function ($id) {
        return back()->with('status', 'Applied (WIP)');
    })->name('opportunities.apply');
}

// Teams (basic)
Route::prefix('teams')->middleware('auth')->group(function () {
    if (!Route::has('teams.create')) {
        Route::get('/create', fn () => response('Teams create (WIP)', 200))->name('teams.create');
    }
    if (!Route::has('teams.store')) {
        Route::post('/', fn () => redirect()->route('teams.create'))->name('teams.store');
    }
    if (!Route::has('teams.show')) {
        Route::get('/{team}', fn ($team) => response('Team '.$team.' (WIP)', 200))->name('teams.show');
    }
});

// Notifications
Route::middleware('auth')->group(function () {
    if (!Route::has('notifications.readAll')) {
        Route::post('/notifications/read-all', fn () => back()->with('status','Read all (WIP)'))->name('notifications.readAll');
    }
    if (!Route::has('notifications.test')) {
        Route::get('/notifications/test', fn () => back()->with('status','Test sent (WIP)'))->name('notifications.test');
    }
    if (!Route::has('notifications.read')) {
        Route::post('/notifications/{id}/read', fn ($id) => back()->with('status','Read '.$id))->name('notifications.read');
    }
});

// Public apply (generic)
if (!Route::has('apply.store')) {
    Route::middleware('form.ratelimit')->post('/apply', fn () => back()->with('status','Submitted (WIP)'))->name('apply.store');
}

// Stories & Categories (public)
if (!Route::has('stories.show')) {
    Route::get('/stories/{id}', fn ($id) => response('Story '.$id.' (WIP)', 200))->name('stories.show');
}
if (!Route::has('categories.show')) {
    Route::get('/categories/{id}', fn ($id) => response('Category '.$id.' (WIP)', 200))->name('categories.show');
}

// Partners apply
if (!Route::has('partners.apply.submit')) {
    Route::middleware('form.ratelimit')->post('/partners/apply', fn () => back()->with('status','Applied (WIP)'))->name('partners.apply.submit');
}

// Learning requests
if (!Route::has('learning.store')) {
    Route::middleware(['auth','form.ratelimit'])->post('/learning', fn () => back()->with('status','Saved (WIP)'))->name('learning.store');
}

// KYC upload
if (!Route::has('kyc.upload')) {
    Route::middleware(['auth','form.ratelimit'])->post('/kyc/upload', fn () => back()->with('status','Uploaded (WIP)'))->name('kyc.upload');
}

// --- alias: /qr/verify -> existing verify routes ---
Route::get(/qr/verify/{code?}, function (?string $code = null) {
    if ($code) {
        return redirect()->route('verify.show', [code => $code]);
    }
    if (function_exists('view') && (view()->exists('public.certificates.verify') || view()->exists('verify.index'))) {
        return view(view()->exists('public.certificates.verify') ? 'public.certificates.verify' : 'verify.index');
    }
    return redirect('/');
})
->name('qr.verify');
    if ($code) {
        return redirect()->route('verify.show', ['code' => $code]); // you already have verify/{code}
    }
    // If you prefer a landing, you also have public/certificates/verify view:
    return redirect()->route('certificates.verify', ['code' => '']);

// --- alias: /qr/verify -> existing verification routes ---
Route::get('/qr/verify/{code?}', function (?string $code = null) {
    if ($code) {
        return redirect()->route('verify.show', ['code' => $code]); // you already have verify/{code}
    }
    // Show a verify landing if available, else go home.
    if (view()->exists('public.certificates.verify')) {
        return view('public.certificates.verify');
    }
    if (view()->exists('verify.index')) {
        return view('verify.index');
    }
    return redirect('/');
})->name('qr.verify');
