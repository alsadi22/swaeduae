<?php

// === CLEAN HEADER (single open tag will be added below) ===
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ContactController;

Route::get('/lang/{locale}', function ($locale) {
    app()->setLocale($locale);
    session()->put('app_locale', $locale);
    return back();
})->name('lang.switch');

Route::get('/contact-us', fn () => view('public.contact'))->name('contact.show');
Route::get('/contact', fn () => redirect('/contact-us', 302));

Route::post('/contact', [ContactController::class, 'send'])
    ->middleware(['throttle:5,1'])
    ->name('contact.send');
// === END HEADER ===

// === include Agent routes (safe) ===
if (file_exists(__DIR__ . '/agent.php')) { require __DIR__ . '/agent.php'; }

/* Agent routes loader (no web access unless enabled) */
if (config('agent.enabled') && file_exists(__DIR__.'/agent.php')) {
    require __DIR__.'/agent.php';
}

/* Agent routes loader (no web access unless enabled) */
if (config('agent.enabled') && file_exists(__DIR__.'/agent.php')) {
    require __DIR__.'/agent.php';
}
/* --- TEMP: compatibility route-name aliases --- */
Route::get('/_alias/privacy', fn() => redirect()->route('pages.privacy'))->name('privacy');
Route::get('/_alias/terms', fn() => redirect()->route('pages.terms'))->name('terms');
Route::get('/_alias/contact', fn() => redirect()->route('contact.show'))->name('contact');
/* --- END TEMP --- */
/* --- TEMP SAFE ALIASES: prevent route() exceptions on legacy names --- */
Route::get('/_alias/faq', fn() => redirect()->route('faq'))->name('pages.faq');
Route::get('/_alias/login-volunteer', fn() => redirect()->route('login'))->name('login.volunteer');

Route::get('/_alias/public-events', fn() => redirect()->route('events.index'))->name('public.events');
Route::get('/_alias/public-opps', fn() => redirect()->route('opportunities.index'))->name('public.opportunities');
Route::get('/_alias/public-orgs', fn() => redirect()->route('partners'))->name('public.organizations');

/* detail aliases: keep {id} param intact */
Route::get('/_alias/public-opps/{id}', fn($id) => redirect()->route('opps.public.show', ['id'=>$id]))->name('public.opportunities.show');
Route::get('/_alias/opportunities/{id}', fn($id) => redirect()->route('opps.public.show', ['id'=>$id]))->name('opportunities.show');
/* --- END TEMP --- */
require __DIR__.'/compat.php';
/* ==== PHASE0_MISSING_ROUTE_ALIASES (auto-added 2025-08-28) ==== */
use Illuminate\Http\Request;

if (!function_exists('phase0_defined')) {
    function phase0_defined($name) { return \Illuminate\Support\Facades\Route::has($name); }
}

/* verify.show → /verify?code=... */
if (!phase0_defined('verify.show')) {
    Route::get('/verify/{code}', function (string $code) {
        return redirect('/verify?code='.$code);
    })->name('verify.show');
}

/* my.hours */
if (!phase0_defined('my.hours')) {
    Route::middleware('auth')->get('/me/hours', function () {
        return view()->exists('volunteer.hours')
            ? view('volunteer.hours')
            : response('My Hours (WIP)', 200);
    })->name('my.hours');
}

/* volunteer.profile.update / vol.profile.update */
if (!phase0_defined('volunteer.profile.update')) {
    Route::middleware('auth')->match(['post','patch'],'/volunteer/profile', function (Request $r) {
        return response('volunteer.profile.update (WIP)', 200);
    })->name('volunteer.profile.update');
}
if (!phase0_defined('vol.profile.update')) {
    Route::middleware('auth')->match(['post','patch'],'/my/profile', fn() => response('vol.profile.update (WIP)',200))->name('vol.profile.update');
}

/* profile.update / profile.destroy */
if (!phase0_defined('profile.update')) {
    Route::middleware('auth')->patch('/profile', fn() => response('profile.update (WIP)',200))->name('profile.update');
}
if (!phase0_defined('profile.destroy')) {
    Route::middleware('auth')->delete('/profile', fn() => response('profile.destroy (WIP)',200))->name('profile.destroy');
}

/* admin.root / org.root */
if (!phase0_defined('admin.root')) {
    Route::get('/admin', fn() => redirect('/admin/login'))->name('admin.root');
}
if (!phase0_defined('org.root')) {
    Route::get('/org', fn() => redirect('/org/login'))->name('org.root');
}

/* organizations.register → /org/register */
if (!phase0_defined('organizations.register')) {
    Route::get('/organizations/register', fn() => redirect('/org/register'))->name('organizations.register');
}

/* opportunities.withdraw */
if (!phase0_defined('opportunities.withdraw')) {
    Route::middleware('auth')->post('/opportunities/{id}/withdraw', function ($id) {
        return back()->with('status','Withdraw (WIP)');
    })->name('opportunities.withdraw');
}

/* profile.avatar.{store,destroy} */
if (!phase0_defined('profile.avatar.store')) {
    Route::middleware('auth')->post('/profile/avatar', fn() => response('profile.avatar.store (WIP)',200))->name('profile.avatar.store');
}
if (!phase0_defined('profile.avatar.destroy')) {
    Route::middleware('auth')->delete('/profile/avatar', fn() => response('profile.avatar.destroy (WIP)',200))->name('profile.avatar.destroy');
}

/* org attendance indexes */
if (!phase0_defined('org.opportunities.attendance.index')) {
    Route::middleware('auth')->get('/org/opportunities/{opportunity}/attendance',
        fn($opportunity) => response("Attendance for opportunity {$opportunity} (WIP)",200)
    )->name('org.opportunities.attendance.index');
}
if (!phase0_defined('org.events.attendance.index')) {
    Route::middleware('auth')->get('/org/events/{event}/attendance',
        fn($event) => response("Attendance for event {$event} (WIP)",200)
    )->name('org.events.attendance.index');
}
/* ==== /PHASE0_MISSING_ROUTE_ALIASES ==== */
/* === MVP Public pages (Phase-1) === */
/* Contact (GET/POST) */
Route::post('/contact')->middleware('throttle:contact')->name('contact.send');
/* === MVP Public pages (Phase-1, deduped) === */

/* Contact (GET + POST) */

Route::post('/contact', function (\Illuminate\Http\Request $r) {
    // Honeypot
    if (strlen((string)$r->input('__website')) > 0) {
        abort(422, 'Bot detected');
    }
    $data = $r->validate([
        'name'    => 'required|string|max:100',
        'email'   => 'required|email:rfc,dns',
        'message' => 'required|string|max:5000',
    ]);
    \Illuminate\Support\Facades\Mail::raw(
        "Contact form\nName: {$data['name']}\nEmail: {$data['email']}\n\n{$data['message']}",
        function (\Illuminate\Mail\Message $m) {
            $to = config('mail.from.address', 'info@swaeduae.ae');
            $m->to($to)->subject('Website Contact Message');
        }
    );
    return back()->with('status', __('Thanks — we received your message.'));
})->middleware('throttle:5,1')->name('contact.send');
/* === Phase-1: ensure home & services routes exist (idempotent) === */
if (!\Illuminate\Support\Facades\Route::has('home')) {
    Route::get('/', fn() => view()->exists('public.home') ? view('public.home') : response('Home (WIP)',200))->name('home');
}
if (!\Illuminate\Support\Facades\Route::has('services')) {
    Route::get('/services', fn() => view()->exists('public.services') ? view('public.services') : response('Services (WIP)',200))->name('services');
}
/* Alias: /contact -> /contact-us */
if (!\Illuminate\Support\Facades\Route::has('contact.get')) {
    Route::get('/contact', fn() => redirect()->route('contact.show'))->name('contact.get');
}
