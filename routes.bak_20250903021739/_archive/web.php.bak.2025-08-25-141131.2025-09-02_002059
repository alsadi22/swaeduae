<?php
require_once __DIR__ . '/_phase0_helpers.php';

use App\Http\Controllers\ProfileController;
use Illuminate\Support\Facades\Route;

Route::get('/', function () { return view('public.tp-home'); })->name('home');

Route::get('/dashboard', function () {
    return view('dashboard');
})->middleware(['auth', 'verified'])->name('dashboard');

Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

require __DIR__.'/auth.php';

Route::get('/qr/verify', fn() => redirect()->route('verify'))->name('qr.verify');
Route::post('/logout', function () {
    auth()->logout();
    request()->session()->invalidate();
    request()->session()->regenerateToken();
    return redirect('/');
})->middleware('auth')->name('logout');
 |  Phase-0: public stubs & admin login (do not remove)
 * =====================================================*/
 // PHASE0_STUB_ROUTES
Route::view('/partners/', 'public.partners')->name('pages.partners.slash');

Route::view('/about', 'public.about')->name('pages.about');
Route::view('/contact', 'public.contact')->name('contact.show');
Route::post('/contact', function(\Illuminate\Http\Request $r){
    // Phase-0: accept and pretend OK
    return back()->with('success', __('Message sent'));
})->name('contact.submit');

Route::view('/faq', 'public.faq')->name('pages.faq');
Route::view('/partners', 'public.partners')->name('pages.partners');

// Verification page + QR alias
Route::view('/verify', 'public.verify')->name('verify');

// Admin login (Argon skin). Full admin guard comes in Phase-4.
Route::view('/admin/login', 'admin.login')->name('admin.login');

// Name the home route if not already

/* ======================================================
 |  Phase-0: Guarded named-route stubs (temporary)
 |  These let Blade generate URLs without 404s.
 |  Real controllers will replace these in later phases.
 * =====================================================*/
/* ======================================================
 |  Phase-0: Guarded named-route stubs (temporary)
 |  These let Blade generate URLs without 404s.
 |  Real controllers will replace these in later phases.
 * =====================================================*/
// PHASE0_NAMED_STUBS
# phase0_stub('home','/');phase0_stub('about','/about');phase0_stub('contact','/contact');phase0_stub('faq','/faq');phase0_stub('partners','/partners');






if (!function_exists('stub_path')) {
    function stub_path($prefix, $name) {
        $slug = \Illuminate\Support\Str::of($name)->replace('.', '/')->replace('_','-');
        return "/{$prefix}/".$slug;
    }
}

/* ---------- ADMIN (guarded) ---------- */
\Illuminate\Support\Facades\Route::prefix('admin')->middleware('auth:admin')->group(function () {
    $admin = [
        'admin.root','admin.users','admin.users.index','admin.users.edit','admin.users.update',
        'admin.roles.perms','admin.roles.store','admin.perms.store',
        'admin.categories.index','admin.categories.create','admin.categories.edit','admin.categories.store','admin.categories.update','admin.categories.destroy',
        'admin.events.index','admin.events.create','admin.events.edit','admin.events.store','admin.events.update','admin.events.destroy',
        'admin.opportunities.index','admin.opportunities.create','admin.opportunities.edit','admin.opportunities.store','admin.opportunities.update','admin.opportunities.destroy',
        'admin.opportunities.complete','admin.opportunities.qr.issue','admin.opportunities.qr.reset','admin.opportunities.qr.finalize',
        'admin.audit.export.csv','admin.export.applications','admin.export.certificates','admin.export.hours','admin.export.users',
        'admin.certificates.index','admin.certificates.store','admin.certificates.resend',
        'admin.learning.index','admin.learning.update',
        'admin.organizations.index','admin.organizations.create','admin.organizations.edit','admin.organizations.update','admin.organizations.destroy',
        'admin.organizations.approve','admin.organizations.reject',
        'admin.kyc.approve','admin.kyc.decline','admin.kyc.download','admin.kyc.reject',
        'admin.profile.update','admin.settings.index','admin.settings.update',
        'admin.news.store','admin.tools.finalizeCerts.post','admin.login.post',
    ];
    foreach ($admin as $n) { phase0_stub($n, stub_path('_stub', $n), ['auth:admin']); }
});

/* ---------- ORG (guarded) ---------- */
\Illuminate\Support\Facades\Route::prefix('org')->middleware('auth:org')->group(function () {
    $org = [
        'org.root','org.dashboard','org.reports','org.reports.hours.csv',
        'org.events.index','org.events.export','org.events.finalize','org.events.attendance.index','org.events.volunteers','org.events.volunteers.csv',
        'org.opps.index','org.opps.create','org.opps.edit','org.opps.store','org.opps.update','org.opps.destroy',
        'org.opportunities.attendance.index','org.opportunities.attendance.settings.save','org.opportunities.slotcap.update',
        'org.attendances.check','org.attendances.minutes','org.attendances.minutes.update','org.attendances.no_show',
        'org.attendance.finalize','org.attendance.minutes.update','org.attendance.no_show.toggle',
        'org.attendances.cert.resend',
        'org.certificates.index','org.certificates.issue','org.certificates.resend','org.certificates.export.csv',
        'org.profile.update','org.settings.edit','org.settings.update','org.team.invite','org.team.remove',
        'org.kyc.update','org.license.request','org.register.store',
        'org.applicants.decision.single','org.applicants.decision.bulk','org.shortlist.bulk','org.shortlist.slot_cap',
    ];
    foreach ($org as $n) { phase0_stub($n, stub_path('_stub', $n), ['auth:org']); }
});

/* ---------- PUBLIC/NON-GUARDED STUBS ---------- */
$public = [
    'opportunities.index','opportunities.show','opportunities.apply','opportunities.withdraw',
    'opportunities.attendances.csv','opportunities.qr',
    'public.events','public.events.show','public.gallery','public.opportunities','public.opportunities.show','public.opportunity.show','public.organizations',
    'opps.public.show','orgs.public.index','orgs.public.show',
    'login.perform','login.volunteer','login.organization','login.email',
    'register.perform','register.organization.store',
    'attendance.checkin','attendance.checkout','scan','scan.checkin','scan.checkout',
    'certificates.show','certificates.my','certificates.pdf','certificates.issue','certificates.verify',
    'categories.show','stories.show','partners.apply.submit','faq',
    'profile.avatar.store','profile.avatar.destroy',
    'learning.store','locale.switch','social.redirect','uaepass.redirect','token','transcript.pdf',
    'payments.processStripe','payments.processPayTabs',
    'teams.create','teams.show','teams.store',
    'organization.opportunities.create','organization.register.store','organizations.register','organizations.register.store',
    'my.hours','my.certificates','my.certificates.download','notifications.read','notifications.readAll','notifications.test',
    'vol.profile.update','volunteer.profile.update','volunteer.dashboard',
];
foreach ($public as $n) { phase0_stub($n, stub_path('_stub', $n)); }

/* Friendly redirects */
\Illuminate\Support\Facades\Route::get('/_stub/login/perform', fn()=>redirect('/login'))->name('login.perform.stub');
\Illuminate\Support\Facades\Route::get('/_stub/register/perform', fn()=>redirect('/register'))->name('register.perform.stub');
\Illuminate\Support\Facades\Route::get('/_stub/login/volunteer', fn()=>redirect('/login'))->name('login.volunteer.stub');
\Illuminate\Support\Facades\Route::get('/_stub/login/organization', fn()=>redirect('/login'))->name('login.organization.stub');
\Illuminate\Support\Facades\Route::get('/_stub/login/email', fn()=>redirect('/login'))->name('login.email.stub');

if (!\Illuminate\Support\Facades\Route::has('verify.show')) {
    \Illuminate\Support\Facades\Route::get('/verify/show', fn()=>redirect()->route('verify'))->name('verify.show');
}
if (!\Illuminate\Support\Facades\Route::has('faq')) {
    \Illuminate\Support\Facades\Route::get('/faq-alias', fn()=>redirect('/faq'))->name('faq.alias');
}

/* Phase-0: minimal extras (do not remove) */
/* These use the previously defined phase0_stub() + stub_path() */
// PHASE0_EXTRA_STUBS
if (function_exists('phase0_stub') && function_exists('stub_path')) {
    phase0_stub('apply.store', stub_path('_stub','apply.store'));                    // public placeholder
    phase0_stub('kyc.upload',  stub_path('_stub','kyc.upload'), ['auth:org']);       // org-guarded
}

// PHASE1_PUBLIC_ROUTES
Route::get('/opportunities', fn()=>view('public.opportunities.index'))->name('opportunities.list');
Route::get('/opportunities/{id}', fn($id)=>view('public.opportunities.show', compact('id')))->whereNumber('id')->name('opportunities.show');

// PHASE1_LANG_SWITCH_FIX
Route::get('/_stub/lang/switch/{locale}', fn($locale) => redirect()->route('locale.switch', ['locale' => $locale]))->name('lang.switch');
Route::get('/_stub/lang/switch', fn() => redirect()->route('home'))->name('lang.switch.stub');



Route::get('/healthz', fn() => response('ok', 200));

// === Phase-0 safety: add missing public named routes (skip any that already exist) ===
if (function_exists('phase0_stub')) {
    $__phase0_public = [
        ['home','/'],
        ['about','/about'],
        ['contact','/contact'],
        ['faq','/faq'],
        ['partners','/partners'],
    ];
    foreach ($__phase0_public as [$__n, $__u]) {
        if (!\Illuminate\Support\Facades\Route::has($__n)) {
            phase0_stub($__n, $__u);
        }
    }
}

/* ======================================================
 |  Phaseâ€‘0 helper (safe stub creator)
 |  Always names with ".stub" so it never collides with real routes.
 * =====================================================*/
if (!function_exists('phase0_stub')) {
    function phase0_stub(string $name, string $uri, array $middleware = []) {
        if (!str_ends_with($name, '.stub')) { $name .= '.stub'; }
        if (!\Illuminate\Support\Facades\Route::has($name)) {
            $r = \Illuminate\Support\Facades\Route::any($uri, function() use ($name) {
                return response()->view('public.not-implemented', ['name' => $name], 200);
            })->name($name);
            if (!empty($middleware)) { $r->middleware($middleware); }
        }
    }
}
Route::post('/logout', function () {
    auth()->logout();
